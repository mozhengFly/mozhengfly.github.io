<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Google Plugins</title>
    <url>/2024/04/30/GooglePlugins/</url>
    <content><![CDATA[<h2 id="Google-插件"><a href="#Google-插件" class="headerlink" title="Google 插件"></a>Google 插件</h2><ul>
<li>ElasticSearch Head<ul>
<li>ElasticSearch连接工具</li>
</ul>
</li>
<li>GitHub加速<ul>
<li>国内Github下载很慢，用上了这个插件后，下载速度嗖嗖嗖的~！</li>
</ul>
</li>
<li>GoFullPage<ul>
<li>完整可靠地捕获当前页面的屏幕截图-无需请求任何额外的权限！</li>
</ul>
</li>
<li>JSON Viewer<ul>
<li>接口Json数据查看神器</li>
</ul>
</li>
<li>Tampermonkey<ul>
<li>网站脚本注入</li>
</ul>
</li>
<li>Vue.js devtools<ul>
<li>Vue调试工具</li>
</ul>
</li>
<li>Window Resizer<ul>
<li>调整浏览器窗口大小</li>
</ul>
</li>
<li>捕捉网页截图<ul>
<li>网页截图</li>
</ul>
</li>
<li>SetupVPN<ul>
<li>免费的，将就着用吧</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Plugin</category>
      </categories>
      <tags>
        <tag>Plugin</tag>
      </tags>
  </entry>
  <entry>
    <title>Ffmpeg命令</title>
    <url>/2020/08/02/ffmpeg/</url>
    <content><![CDATA[<h3 id="视频处理命令"><a href="#视频处理命令" class="headerlink" title="视频处理命令"></a>视频处理命令</h3><h4 id="视频裁剪"><a href="#视频裁剪" class="headerlink" title="视频裁剪"></a>视频裁剪</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ffmpeg -ss 1200 -t 2 -accurate_seek -i 34.mp4 -codec copy -avoid_negative_ts 1 cut3.mp4</span><br></pre></td></tr></table></figure>

<p>上面的命令会导致时长不对，原因</p>
<blockquote>
<p>-c copy就是没有重新编码，直接裁剪视频，这样会出现一个问题：如果不重编码的分割视频，就需要对准视频的关键帧分割，比如视频的关键帧在8s处，而你是从10s开始分割，分割就会调整在8s处，这样剪切出来的视频就会比想要的长了</p>
</blockquote>
<p>新命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ffmpeg -ss 1200 -t 2 -accurate_seek -i 34.mp4 -avoid_negative_ts 1 cut3.mp4</span><br></pre></td></tr></table></figure>

<h4 id="视频合并"><a href="#视频合并" class="headerlink" title="视频合并"></a>视频合并</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// filelist.txt</span><br><span class="line">file <span class="string">'cut3.mp4'</span></span><br><span class="line">file <span class="string">'cut4.mp4'</span></span><br><span class="line">file <span class="string">'cut5.mp4'</span></span><br><span class="line"></span><br><span class="line">// 命令</span><br><span class="line">ffmpeg -f concat -i .\filelist.txt tt.mp4</span><br></pre></td></tr></table></figure>

<h4 id="视频压缩"><a href="#视频压缩" class="headerlink" title="视频压缩"></a>视频压缩</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ffmpeg -i tt.mp4 -b:v 400k -s 200*300 tt-ya.mp4</span><br></pre></td></tr></table></figure>

<h4 id="生成预览视频"><a href="#生成预览视频" class="headerlink" title="生成预览视频"></a>生成预览视频</h4><p>每10秒中取前2秒作为预览，<code>-an</code>表示删除声音</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ffmpeg.exe -i input.mp4 -vf <span class="string">"select='lte(mod(t, 10),2)',setpts=N/FRAME_RATE/TB"</span> -an -y preview_out.mp4</span><br></pre></td></tr></table></figure>

<p>如果不想删除声音，就用以下命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ffmpeg.exe -i input.mp4 -vf <span class="string">"select='lte(mod(t, 10),2)',setpts=N/FRAME_RATE/TB"</span> -af <span class="string">"aselect='lte(mod(t, 10),2)',asetpts=N/SR/TB"</span> -y preview_out.mp4</span><br></pre></td></tr></table></figure>

<h4 id="生成视频预览图"><a href="#生成视频预览图" class="headerlink" title="生成视频预览图"></a>生成视频预览图</h4><p>截取第10秒的帧作为预览图</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ffmpeg -ss 00:00:10 -i .\intro.mp4 -f image2 -frames:v 1 -y preview.jpg</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Ffmpeg</category>
      </categories>
      <tags>
        <tag>音频处理</tag>
      </tags>
  </entry>
  <entry>
    <title>Git</title>
    <url>/2020/08/02/git/</url>
    <content><![CDATA[<h3 id="查看指定区间的代码行数"><a href="#查看指定区间的代码行数" class="headerlink" title="查看指定区间的代码行数"></a>查看指定区间的代码行数</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git log  --format='%aN' | sort -u | while read name; do echo -en "$name\t"; git log --author="$name" --pretty=tformat:  --since ==2017-4-1 --until=2017-9-30 --numstat | awk '&#123; add += $1; subs += $2; loc += $1 - $2 &#125; END &#123; printf "added lines: %s, removed lines: %s, total lines: %s\n", add, subs, loc &#125;' -; done</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Git</category>
      </categories>
  </entry>
  <entry>
    <title>Linux常用命令</title>
    <url>/2024/04/30/linux/</url>
    <content><![CDATA[<h2 id="Linux常用命令"><a href="#Linux常用命令" class="headerlink" title="Linux常用命令"></a>Linux常用命令</h2><h3 id="设置时区"><a href="#设置时区" class="headerlink" title="设置时区"></a>设置时区</h3><ol>
<li>安装ntp服务软件包：yum install ntp</li>
<li>将ntp设置为缺省启动：systemctl enable ntpd</li>
<li>修改启动参数，增加-g -x参数，允许ntp服务在系统时间误差较大时也能正常工作：vi /etc/sysconfig/ntpd</li>
<li>启动ntp服务：service ntpd restart</li>
<li>将系统时区改为上海时间（即CST时区）：ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</li>
<li>输入date命令查看时间是否正确</li>
</ol>
<h3 id="Centos6-5-开放指定端口"><a href="#Centos6-5-开放指定端口" class="headerlink" title="Centos6.5 开放指定端口"></a>Centos6.5 开放指定端口</h3><ol>
<li>vi /etc/sysconfig/iptables 打开配置文件</li>
<li>加入如下语句: -A INPUT -p tcp -m state –state NEW -m tcp –dport 8080 -j ACCEPT</li>
<li>重启防火墙，修改完成 service iptables restart</li>
</ol>
<h3 id="Centos7-开放指定端口"><a href="#Centos7-开放指定端口" class="headerlink" title="Centos7 开放指定端口"></a>Centos7 开放指定端口</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">firewall-cmd --zone=public --add-port=8080/tcp --permanent</span><br><span class="line">firewall-cmd --zone=public --add-port=5962/tcp --permanent</span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure>

<h3 id="Crontab操作"><a href="#Crontab操作" class="headerlink" title="Crontab操作"></a>Crontab操作</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">crontab -u //设定某个用户的cron服务 </span><br><span class="line">crontab -l //列出某个用户cron服务的详细内容 </span><br><span class="line">crontab -r //删除某个用户的cron服务 </span><br><span class="line">crontab -e //编辑某个用户的cron服务</span><br><span class="line">crontab -i //打印提示，输入yes等确认信息</span><br><span class="line"></span><br><span class="line">/var/spool/cron/root (以用户命名的文件) 是所有默认存放定时任务的文件</span><br><span class="line">/etc/cron.deny 该文件中所列出用户不允许使用crontab命令</span><br><span class="line">/etc/cron.allow 该文件中所列出用户允许使用crontab命令，且优先级高于/etc/cron.deny</span><br><span class="line"></span><br><span class="line">/var/log/cron    该文件存放cron服务的日志</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">基本格式 :</span><br><span class="line">*　　*　　*　　*　　*　　command</span><br><span class="line">分　时　日　月　周　命令</span><br><span class="line">第1列表示分钟1～59 每分钟用*或者 */1表示</span><br><span class="line">第2列表示小时1～23（0表示0点）</span><br><span class="line">第3列表示日期1～31</span><br><span class="line">第4列表示月份1～12</span><br><span class="line">第5列标识号星期0～6（0表示星期天）</span><br><span class="line">第6列要运行的命令</span><br><span class="line">crontab文件的一些例子：</span><br><span class="line">30 21 * * * /usr/local/etc/rc.d/lighttpd restart</span><br><span class="line">上面的例子表示每晚的21:30重启apache。</span><br><span class="line"></span><br><span class="line">45 4 1,10,22 * * /usr/local/etc/rc.d/lighttpd restart</span><br><span class="line">上面的例子表示每月1、10、22日的4 : 45重启apache。</span><br><span class="line"></span><br><span class="line">10 1 * * 6,0 /usr/local/etc/rc.d/lighttpd restart</span><br><span class="line">上面的例子表示每周六、周日的1 : 10重启apache。</span><br><span class="line"></span><br><span class="line">0,30 18-23 * * * /usr/local/etc/rc.d/lighttpd restart</span><br><span class="line">上面的例子表示在每天18 : 00至23 : 00之间每隔30分钟重启apache。</span><br><span class="line"></span><br><span class="line">0 23 * * 6 /usr/local/etc/rc.d/lighttpd restart</span><br><span class="line">上面的例子表示每星期六的11 : 00 pm重启apache。</span><br><span class="line"></span><br><span class="line">* */1 * * * /usr/local/etc/rc.d/lighttpd restart</span><br><span class="line">每一小时重启apache</span><br><span class="line"></span><br><span class="line">* 23-7/1 * * * /usr/local/etc/rc.d/lighttpd restart</span><br><span class="line">晚上11点到早上7点之间，每隔一小时重启apache</span><br><span class="line"></span><br><span class="line">0 11 4 * mon-wed /usr/local/etc/rc.d/lighttpd restart</span><br><span class="line">每月的4号与每周一到周三的11点重启apache</span><br><span class="line"></span><br><span class="line">0 4 1 jan * /usr/local/etc/rc.d/lighttpd restart</span><br><span class="line">一月一号的4点重启apache</span><br></pre></td></tr></table></figure>

<h3 id="日期格式化"><a href="#日期格式化" class="headerlink" title="日期格式化"></a>日期格式化</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo "[`date +%Y-%m-%d_%H:%M:%S`] 打印日志"</span><br></pre></td></tr></table></figure>

<h3 id="Yum"><a href="#Yum" class="headerlink" title="Yum"></a>Yum</h3><p>查看可以安装的软件版本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum list libuv --showduplicates</span><br></pre></td></tr></table></figure>

<p>移除软件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum remove libuv</span><br></pre></td></tr></table></figure>

<h3 id="远程文件拷贝"><a href="#远程文件拷贝" class="headerlink" title="远程文件拷贝"></a>远程文件拷贝</h3><p>拷贝本机/home/administrator/test整个目录至远程主机192.168.1.100的/root目录下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">scp -r /home/administrator/test/ root@192.168.1.100:/root/</span><br></pre></td></tr></table></figure>

<p>拷贝单个文件至远程主机</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">scp /home/administrator/Desktop/old/driver/test/test.txt root@192.168.1.100:/root/</span><br></pre></td></tr></table></figure>

<p>把192.168.62.10上面的/root/文件夹，下载到本地的/home/administrator/Desktop/new/下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">scp -r root@192.168.62.10:/root/ /home/administrator/Desktop/new/</span><br></pre></td></tr></table></figure>

<h3 id="常见问题处理"><a href="#常见问题处理" class="headerlink" title="常见问题处理"></a>常见问题处理</h3><h4 id="文件格式编码不对"><a href="#文件格式编码不对" class="headerlink" title="文件格式编码不对"></a>文件格式编码不对</h4><p>错误信息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-bash: ./start-config.sh: /bin/bash^M: bad interpreter: No such file or directory</span><br></pre></td></tr></table></figure>

<p>原因分析</p>
<blockquote>
<p>​        如果这个脚本在Windows下编辑过，就有可能被转换成Windows下的dos文本格式了，这样的格式每一行的末尾都是以\r\n来标识，它的ASCII码分别是0x0D，0x0A。如果你将这个脚本文件直接放到Linux上执行就会报/bin/bash^M: bad interpreter错误提示。</p>
</blockquote>
<p>解决方案</p>
<blockquote>
<ol>
<li>用vi命令打开要检查的脚本文件</li>
<li>:set ff? 命令检查格式</li>
<li>检查结果是dos的话，执行 :set ff=unix 命令改变格式</li>
<li>:wq 保存退出即可</li>
</ol>
</blockquote>
<h4 id="RPM安装依赖冲突"><a href="#RPM安装依赖冲突" class="headerlink" title="RPM安装依赖冲突"></a>RPM安装依赖冲突</h4><p>错误信息</p>
<blockquote>
<p>file /usr/lib64/libxkbcommon-x11.so.0.0.0 from install of libxkbcommon-x11-0.8.4-3.ky10.mips64el conflicts with file from package libxkbcommon-x11-0.5.0-1.nd7.3.mips64el</p>
</blockquote>
<p>解决方案</p>
<blockquote>
<p>rpm -ivh后面加入 –force –nodeps 来忽略软件包及文件的冲突，不验证套件依赖性</p>
</blockquote>
<h3 id="上传文件"><a href="#上传文件" class="headerlink" title="上传文件"></a>上传文件</h3><p>使用<code>curl</code>上传文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -F <span class="string">"file=@Test.class"</span> http://ip:3252/files/actions/upload</span><br></pre></td></tr></table></figure>

<p>注意：特殊符号需要转义</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -F <span class="string">"file=@Test\$1.class"</span> http://ip:3252/files/actions/upload</span><br></pre></td></tr></table></figure>

<h3 id="检查某个服务是否可以访问"><a href="#检查某个服务是否可以访问" class="headerlink" title="检查某个服务是否可以访问"></a>检查某个服务是否可以访问</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">uri=<span class="string">"<span class="variable">$1</span>"</span></span><br><span class="line"><span class="built_in">shift</span></span><br><span class="line">cmd=<span class="string">"<span class="variable">$@</span>"</span></span><br><span class="line">current_time=$(date --date=<span class="string">'0 days ago'</span> <span class="string">"+%Y-%m-%d %H:%M:%S"</span>)</span><br><span class="line"><span class="keyword">if</span> [ `curl -m 10 -o /dev/null -s -w %&#123;http_code&#125; <span class="variable">$uri</span>` = 200 ];<span class="keyword">then</span></span><br><span class="line">    &gt;&amp;2 <span class="built_in">echo</span> <span class="string">"<span class="variable">$current_time</span> : <span class="variable">$uri</span> is available - do nothing"</span> &gt;&gt; <span class="variable">$PWD</span>/check.log</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&gt;&amp;2 <span class="built_in">echo</span> <span class="string">"<span class="variable">$current_time</span> : <span class="variable">$uri</span> is unavailable - execute command <span class="variable">$cmd</span>"</span> &gt;&gt; <span class="variable">$PWD</span>/check.log</span><br><span class="line"><span class="built_in">exec</span> <span class="variable">$cmd</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>

<p>用法</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">0 2 * * * /opt/check.sh http://www.mozhengfly.top /opt/front-web/restart.sh</span><br><span class="line">30 2 * * * /opt/check.sh http://www.mozhengfly.top:5678/api/v1/sign/baa/url /opt/web/restart.sh</span><br></pre></td></tr></table></figure>

<h3 id="查看各文件夹大小"><a href="#查看各文件夹大小" class="headerlink" title="查看各文件夹大小"></a>查看各文件夹大小</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">du -h /opt | grep G | sort -nr</span><br></pre></td></tr></table></figure>

<h3 id="ll-命令"><a href="#ll-命令" class="headerlink" title="ll 命令"></a>ll 命令</h3><h4 id="按时间排序"><a href="#按时间排序" class="headerlink" title="按时间排序"></a>按时间排序</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 正序</span></span><br><span class="line">ls -lrt</span><br><span class="line"><span class="comment"># 倒序</span></span><br><span class="line">ls -lht</span><br></pre></td></tr></table></figure>

<h4 id="按大小排序"><a href="#按大小排序" class="headerlink" title="按大小排序"></a>按大小排序</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 正序</span></span><br><span class="line">ls -lrS</span><br><span class="line"><span class="comment"># 倒序</span></span><br><span class="line">ls -lhS</span><br></pre></td></tr></table></figure>

<h3 id="查找文件内容"><a href="#查找文件内容" class="headerlink" title="查找文件内容"></a>查找文件内容</h3><p>查找文件夹下所有文件包含<code>search_text</code>的内容</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">grep -r <span class="string">"search_text"</span> /usr/<span class="built_in">local</span>/nginx</span><br></pre></td></tr></table></figure>

<h3 id="导出Java程序信息"><a href="#导出Java程序信息" class="headerlink" title="导出Java程序信息"></a>导出Java程序信息</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">pid=<span class="variable">$1</span></span><br><span class="line">timestempsname=$(date +%H%M%s)</span><br><span class="line"></span><br><span class="line"><span class="comment">#echo $pid</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># folder</span></span><br><span class="line"><span class="keyword">if</span> [ ! -d <span class="variable">$pid</span>  ];<span class="keyword">then</span></span><br><span class="line">  mkdir <span class="variable">$pid</span></span><br><span class="line">  <span class="built_in">cd</span> <span class="variable">$pid</span></span><br><span class="line">  mkdir <span class="variable">$timestempsname</span></span><br><span class="line">  <span class="built_in">cd</span> <span class="variable">$timestempsname</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  mkdir <span class="variable">$timestempsname</span></span><br><span class="line">  <span class="built_in">cd</span> <span class="variable">$timestempsname</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># print top</span></span><br><span class="line">dateName=`date +%H%M%s`</span><br><span class="line">topCmd=<span class="string">"top -n 1 -b -Hp <span class="variable">$pid</span> | head -40 &gt; top_<span class="variable">$dateName</span>.txt"</span></span><br><span class="line"><span class="comment">#echo $topCmd</span></span><br><span class="line"><span class="built_in">eval</span> <span class="variable">$topCmd</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># print jstack</span></span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> &#123;1..3&#125;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">   dumpName=`date +%H%M%s`</span><br><span class="line">   dumpCmd=<span class="string">"jstack <span class="variable">$pid</span> &gt; thread_<span class="variable">$dumpName</span>.tdump"</span></span><br><span class="line">   <span class="built_in">eval</span> <span class="variable">$dumpCmd</span></span><br><span class="line">   sleep 5</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># print heap</span></span><br><span class="line">`jmap -heap <span class="variable">$pid</span> &gt; heap_<span class="variable">$dateName</span>.txt`</span><br><span class="line"></span><br><span class="line"><span class="comment"># print histo</span></span><br><span class="line">`jmap -histo <span class="variable">$pid</span> &gt; histo_<span class="variable">$dateName</span>.txt`</span><br><span class="line"></span><br><span class="line"><span class="comment"># print jinfo</span></span><br><span class="line">`jinfo <span class="variable">$pid</span> &gt; info_<span class="variable">$dateName</span>.txt`</span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>常用命令</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis</title>
    <url>/2020/08/06/redis/</url>
    <content><![CDATA[<h2 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h2><h3 id="基础数据结构"><a href="#基础数据结构" class="headerlink" title="基础数据结构"></a>基础数据结构</h3><h4 id="String字符串"><a href="#String字符串" class="headerlink" title="String字符串"></a>String字符串</h4><p>Redis 的字符串是动态字符串，是可以修改的字符串，内部结构实现上类似于 Java 的ArrayList，采用预分配冗余空间的方式来减少内存的频繁分配。</p>
<blockquote>
<p>当字符串长度小于 1M 时，扩容都是加倍现有的空间，如果超过 1M，扩容时一次只会多扩 1M 的空间。需要注意的是字符串最大长度为 512M。</p>
</blockquote>
<h3 id="常见命令"><a href="#常见命令" class="headerlink" title="常见命令"></a>常见命令</h3><h4 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">redis-cli -h 127.0.0.1 -p 6379 -a xxxxxx -n 1</span><br></pre></td></tr></table></figure>

<blockquote>
<p>-h <hostname> Server hostname (default: 127.0.0.1). 指定ip</p>
<p>-p <port> Server port (default: 6379).指定端口，默认是6379</p>
<p>-a <password> Password to use when connecting to the server. 连接密码</p>
<p>-n <db> Database number.指定的数据库</p>
</blockquote>
<h4 id="批量删除指定KEY开头的数据"><a href="#批量删除指定KEY开头的数据" class="headerlink" title="批量删除指定KEY开头的数据"></a>批量删除指定KEY开头的数据</h4><p>批量删除以<code>USER_</code>开头KEY的数据</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./redis-cli -h 172.0.0.1 -p 6379 -a 123456 -n 4 keys <span class="string">"USER_*"</span> |xargs ./redis-cli -h 127.0.0.1 -p 6379 -a 123456 -n 4 del &#123;&#125;\;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Redis</category>
      </categories>
  </entry>
  <entry>
    <title>RPM打包</title>
    <url>/2024/04/30/rpm/</url>
    <content><![CDATA[<h2 id="RPM打包"><a href="#RPM打包" class="headerlink" title="RPM打包"></a>RPM打包</h2><ol>
<li>安装制作工具yum -y install rpmdevtools会自动依赖安装rpm-build</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum -y install rpmdevtools</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>执行rpmdev-setuptree生成开发目录会在~目录生成rpmbuild文件目录</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rpmdev-setuptree</span><br></pre></td></tr></table></figure>

<p>znzs-script.spec</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Name: znzs-script</span><br><span class="line">Version: 1.0.0</span><br><span class="line">Release:        1%&#123;?dist&#125;</span><br><span class="line">Summary: znzs scripts</span><br><span class="line"></span><br><span class="line">Group:Development&#x2F;Tools</span><br><span class="line">License:GPL</span><br><span class="line">URL: http:&#x2F;&#x2F;mozhengfly.top</span><br><span class="line">Source0:%&#123;name&#125;-%&#123;version&#125;.tar.gz</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">%description</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">%prep</span><br><span class="line">%setup -q</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">%build</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">%install</span><br><span class="line">mkdir -p $RPM_BUILD_ROOT&#x2F;opt&#x2F;%&#123;name&#125;</span><br><span class="line">cp -r $RPM_BUILD_DIR&#x2F;%&#123;name&#125;-%&#123;version&#125;&#x2F;* $RPM_BUILD_ROOT&#x2F;opt&#x2F;%&#123;name&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">%clean</span><br><span class="line">rm -rf $RRPM_BUILD_ROOT</span><br><span class="line"></span><br><span class="line">%files</span><br><span class="line">%doc</span><br><span class="line">&#x2F;opt&#x2F;%&#123;name&#125;&#x2F;*</span><br><span class="line"></span><br><span class="line">%postun</span><br><span class="line">rm -rf &#x2F;opt&#x2F;%&#123;name&#125;</span><br><span class="line"></span><br><span class="line">%changelog</span><br></pre></td></tr></table></figure>

<p>打包脚本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">NAME=znzs-script</span><br><span class="line"><span class="keyword">if</span> [ <span class="string">"<span class="variable">$1</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line">  VERSION=<span class="variable">$1</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  VERSION=1.0.0</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="built_in">echo</span> build <span class="variable">$&#123;NAME&#125;</span>-<span class="variable">$&#123;VERSION&#125;</span></span><br><span class="line"><span class="built_in">cd</span> ~/rpmbuild/SOURCES</span><br><span class="line">cp -r <span class="variable">$&#123;NAME&#125;</span> <span class="variable">$&#123;NAME&#125;</span>-<span class="variable">$&#123;VERSION&#125;</span></span><br><span class="line">rm -f <span class="variable">$&#123;NAME&#125;</span>-<span class="variable">$&#123;VERSION&#125;</span>.tar.gz</span><br><span class="line">tar zcvf <span class="variable">$&#123;NAME&#125;</span>-<span class="variable">$&#123;VERSION&#125;</span>.tar.gz <span class="variable">$&#123;NAME&#125;</span>-<span class="variable">$&#123;VERSION&#125;</span></span><br><span class="line">rm -rf <span class="variable">$&#123;NAME&#125;</span>-<span class="variable">$&#123;VERSION&#125;</span></span><br><span class="line"><span class="built_in">cd</span> ../SPECS</span><br><span class="line">sed -i <span class="string">"s/Version:.*/Version: <span class="variable">$&#123;VERSION&#125;</span>/"</span> <span class="variable">$&#123;NAME&#125;</span>.spec</span><br><span class="line">rpmbuild -ba <span class="variable">$&#123;NAME&#125;</span>.spec</span><br><span class="line">cp -r ../RPMS/x86_64/<span class="variable">$&#123;NAME&#125;</span>-<span class="variable">$&#123;VERSION&#125;</span>-*.rpm ../</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>RPM</tag>
      </tags>
  </entry>
  <entry>
    <title>地址大全</title>
    <url>/2020/08/18/%E5%9C%B0%E5%9D%80%E5%A4%A7%E5%85%A8/</url>
    <content><![CDATA[<h3 id="npm镜像地址"><a href="#npm镜像地址" class="headerlink" title="npm镜像地址"></a>npm镜像地址</h3><h4 id="node"><a href="#node" class="headerlink" title="node"></a>node</h4><p>版本浏览</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="attribute">https://nodejs.org/download/release/</span></span><br></pre></td></tr></table></figure>

<p>下载地址</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="attribute">https://cdn.npm.taobao.org/dist/node/v8.16.0/node-v8.16.0-linux-x64.tar.xz</span></span><br></pre></td></tr></table></figure>

<h4 id="electron镜像"><a href="#electron镜像" class="headerlink" title="electron镜像"></a>electron镜像</h4><figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="attribute">https://npm.taobao.org/mirrors/electron/</span></span><br></pre></td></tr></table></figure>

<p>全局设置electron镜像源</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm config <span class="keyword">set</span> electron_mirror https://npm.taobao.org/mirrors/electron/</span><br></pre></td></tr></table></figure>

<p>或者建立<code>.npmrc</code>文件，在里面写镜像源</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">ELECTRON_MIRROR=https:<span class="comment">//npm.taobao.org/mirrors/electron/</span></span><br></pre></td></tr></table></figure>

<h4 id="node-sass"><a href="#node-sass" class="headerlink" title="node-sass"></a>node-sass</h4><p>华为镜像源</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm config <span class="keyword">set</span> sass_binary_site https://mirrors.huaweicloud.com/node-sass</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>地址大全</category>
      </categories>
      <tags>
        <tag>地址大全</tag>
      </tags>
  </entry>
  <entry>
    <title>杂记</title>
    <url>/2020/08/02/%E6%9D%82%E8%AE%B0/</url>
    <content><![CDATA[<h3 id="JQuery获取表单参数和Document的方式区别"><a href="#JQuery获取表单参数和Document的方式区别" class="headerlink" title="JQuery获取表单参数和Document的方式区别"></a>JQuery获取表单参数和Document的方式区别</h3><blockquote>
<p>背景：需要获取表单参数提交给后台，发现<code>textarea</code>节点的值，通过JQuery和Document的方式获取到的结果不一样。JQuery获取到的会有<code>\r</code>，Document获取到的没有<code>\r</code></p>
</blockquote>
<p>Jquery</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 代码</span></span><br><span class="line">$(<span class="string">'#form'</span>).serializeArray()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果</span></span><br><span class="line"><span class="comment">// 测试，推送的数据测试，推送的数据测试，推送的数据测试，推送的数据测试，推送的数据\r\n测试，推送的数据测试，推送的数据测试，推送的数据测试，推送的数据测试，推送的数据\r\n测试，</span></span><br></pre></td></tr></table></figure>

<p>Document</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 代码</span></span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">'form'</span>).elements</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果</span></span><br><span class="line"><span class="comment">// 测试，推送的数据测试，推送的数据测试，推送的数据测试，推送的数据测试，推送的数据\n测试，推送的数据测试，推送的数据测试，推送的数据测试，推送的数据测试，推送的数据\n测试</span></span><br></pre></td></tr></table></figure>

<h3 id="Console发Post请求"><a href="#Console发Post请求" class="headerlink" title="Console发Post请求"></a>Console发Post请求</h3><p>需要先在浏览器中打开网址，然后打开控制台再执行以下的代码。不然会有跨域问题</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">fetch(<span class="keyword">new</span> Request(<span class="string">'http://ip:port/url'</span>, &#123;</span><br><span class="line">    method: <span class="string">'POST'</span>,</span><br><span class="line">    headers: &#123;<span class="string">'Content-Type'</span>: <span class="string">'application/json'</span>, <span class="string">'token'</span>: <span class="string">'code'</span>&#125;,</span><br><span class="line">    body: <span class="string">'&#123;"username":"mozhengfly","password":"123456"&#125;'</span></span><br><span class="line">&#125;)).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res.status);</span><br><span class="line">    res.text().then(<span class="function"><span class="params">text</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(text)</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>杂记</category>
      </categories>
  </entry>
  <entry>
    <title>Mysql存储过程</title>
    <url>/2020/08/06/Sql/Mysql/</url>
    <content><![CDATA[<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="得到随机数"><a href="#得到随机数" class="headerlink" title="得到随机数"></a>得到随机数</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">----得到随机数</span><br><span class="line">drop function if exists f_getRandomNumber;</span><br><span class="line">create function f_getRandomNumber(start_num int, end_num int) RETURNS INT</span><br><span class="line">begin </span><br><span class="line">	RETURN (FLOOR(RAND() * (end_num - start_num + 1)) + start_num);</span><br><span class="line">end</span><br></pre></td></tr></table></figure>

<h3 id="得到随机日期"><a href="#得到随机日期" class="headerlink" title="得到随机日期"></a>得到随机日期</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">----得到随机日期</span><br><span class="line">drop function if exists f_getRandomDate;</span><br><span class="line">create function f_getRandomDate(startDate date, endDate date) RETURNS date</span><br><span class="line">begin </span><br><span class="line">	set @intervalDays &#x3D; endDate - startDate;</span><br><span class="line">	set @randomDays &#x3D; f_getRandomNumber(1, @intervalDays);</span><br><span class="line">	RETURN startDate + @randomDays;</span><br><span class="line">end</span><br></pre></td></tr></table></figure>

<h2 id="存储过程"><a href="#存储过程" class="headerlink" title="存储过程"></a>存储过程</h2><p>示例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">drop procedure if exists sp_gen_user;</span><br><span class="line">create procedure sp_gen_user(in num int)</span><br><span class="line">comment &#39;insert user data&#39;</span><br><span class="line">begin</span><br><span class="line">	declare iCount int;</span><br><span class="line">	declare i int;</span><br><span class="line">	set iCount &#x3D; num;</span><br><span class="line">	set i &#x3D; 0;</span><br><span class="line">	TRUNCATE db_scu.t_user;</span><br><span class="line">	while i &lt; iCount do</span><br><span class="line">		insert into db_scu.t_user(c_bh, c_login_id, c_password, c_name, c_nick_name, c_phone, c_email) </span><br><span class="line">			values (i, CONCAT(&#39;login_id_&#39;, i), &#39;123&#39;, &#39;name&#39;, &#39;nickName&#39;, &#39;phone&#39;, &#39;email&#39;);</span><br><span class="line">		set i &#x3D; i + 1;</span><br><span class="line">	end while;</span><br><span class="line">end</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Sql</category>
      </categories>
      <tags>
        <tag>存储过程</tag>
      </tags>
  </entry>
  <entry>
    <title>Postgresql存储过程</title>
    <url>/2020/08/06/Sql/Postgresql/</url>
    <content><![CDATA[<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span> search_path <span class="keyword">to</span> db_mozhengfly;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*通过传入一个字符串和一个自增的ID生成有序的UUID*/</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">FUNCTION</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> gen_uuid(<span class="built_in">VARCHAR</span>, <span class="built_in">INT</span>);</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> gen_uuid(<span class="built_in">VARCHAR</span>, <span class="built_in">INT</span>) <span class="keyword">RETURNS</span> <span class="built_in">VARCHAR</span> <span class="keyword">AS</span> $$</span><br><span class="line"><span class="comment">/*字符串加上数字组成递增的ID*/</span></span><br><span class="line"><span class="keyword">DECLARE</span></span><br><span class="line">    <span class="keyword">str</span> <span class="keyword">ALIAS</span> <span class="keyword">FOR</span> $<span class="number">1</span>;			<span class="comment">/*字符串*/</span></span><br><span class="line">    num_order ALIAS FOR $2;		<span class="comment">/*数字*/</span></span><br><span class="line">    temp_str VARCHAR;</span><br><span class="line">    res VARCHAR;</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    temp_str := <span class="keyword">md5</span>(<span class="keyword">str</span>);</span><br><span class="line">    res := substring(temp_str, 1, 25) || CAST(to_hex(16777216 + num_order) AS VARCHAR);</span><br><span class="line">    RETURN res;</span><br><span class="line"><span class="keyword">END</span>;</span><br><span class="line">$$</span><br><span class="line">LANGUAGE plpgsql;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*得到身份证号码最后一位*/</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">FUNCTION</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> get_verify(<span class="built_in">VARCHAR</span>);</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> get_verify(<span class="built_in">VARCHAR</span>) <span class="keyword">RETURNS</span> <span class="built_in">VARCHAR</span> <span class="keyword">AS</span> $$</span><br><span class="line"><span class="comment">/*得到身份证最后一位*/</span></span><br><span class="line"><span class="keyword">DECLARE</span> </span><br><span class="line">	id_card <span class="keyword">ALIAS</span> <span class="keyword">FOR</span> $<span class="number">1</span>;</span><br><span class="line">	val_code_arr VARCHAR ARRAY := ARRAY['1','0','X','9','8','7','6','5','4','3','2'];</span><br><span class="line">	wi INT ARRAY := ARRAY[7,9,10,5,8,4,2,1,6,3,7,9,10,5,8,4,2];</span><br><span class="line">	totalNum INT := 0;</span><br><span class="line">	mod_value INT;</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">	<span class="keyword">FOR</span> i <span class="keyword">IN</span> <span class="number">1.</span><span class="number">.17</span> <span class="keyword">loop</span></span><br><span class="line">		totalNum := totalNum + <span class="keyword">CAST</span>( <span class="keyword">substring</span>(id_card, i, <span class="number">1</span>) <span class="keyword">AS</span> <span class="built_in">INT</span>) * wi[i];</span><br><span class="line">	<span class="keyword">END</span> <span class="keyword">loop</span>;	</span><br><span class="line">	mod_value = mod(totalNum, 11);</span><br><span class="line">	RETURN val_code_arr[mod_value + 1];</span><br><span class="line"><span class="keyword">END</span>;</span><br><span class="line">$$</span><br><span class="line">LANGUAGE plpgsql;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*生成身份证号*/</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">FUNCTION</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> gen_idcard(<span class="built_in">VARCHAR</span>);</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> gen_idcard(<span class="built_in">VARCHAR</span>) <span class="keyword">RETURNS</span> <span class="built_in">VARCHAR</span> <span class="keyword">AS</span> $$</span><br><span class="line"><span class="comment">/*传入区县code生成身份证号*/</span></span><br><span class="line"><span class="keyword">DECLARE</span></span><br><span class="line">	id_card <span class="built_in">VARCHAR</span>;</span><br><span class="line">	qx_code ALIAS FOR $1;</span><br><span class="line">	birthday INT;</span><br><span class="line">	b_year INT;</span><br><span class="line">	b_month INT;</span><br><span class="line">	b_day INT;</span><br><span class="line">	ranNum VARCHAR;</span><br><span class="line">	last_str VARCHAR;	</span><br><span class="line">	res VARCHAR;</span><br><span class="line"><span class="keyword">BEGIN</span> </span><br><span class="line">	b_year := <span class="number">1906</span> + random() * <span class="number">100</span>;</span><br><span class="line">	b_month := get_random_number(1, 12);</span><br><span class="line">	CASE b_month WHEN 1,3,5,7,8,10,12 THEN</span><br><span class="line">			b_day := get_random_number(1, 31);</span><br><span class="line">	WHEN 4,6,9,11 THEN</span><br><span class="line">			b_day := get_random_number(1, 30);</span><br><span class="line">	ELSE</span><br><span class="line">			IF mod(b_year, 4) &gt; 0 THEN	</span><br><span class="line">				b_day := get_random_number(1, 29);</span><br><span class="line">			ELSE </span><br><span class="line">				b_day :=get_random_number(1, 28);</span><br><span class="line">			<span class="keyword">END</span> <span class="keyword">IF</span>;</span><br><span class="line">	<span class="keyword">END</span> <span class="keyword">CASE</span>;</span><br><span class="line">	birthday = b_year * 10000 + b_month * 100 + b_day;</span><br><span class="line">	ranNum := substring(CAST(1000 + random() * 999 AS VARCHAR), 2, 3);</span><br><span class="line">	id_card := qx_code || birthday || ranNum;</span><br><span class="line">	last_str := get_verify(id_card);</span><br><span class="line">	res := id_card || last_str;</span><br><span class="line">	RETURN res;</span><br><span class="line"><span class="keyword">END</span>;</span><br><span class="line">$$</span><br><span class="line">LANGUAGE plpgsql;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*通过身份证号得到出生年月日*/</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">FUNCTION</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> get_birth_by_idcard(<span class="built_in">VARCHAR</span>);</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> get_birth_by_idcard(<span class="built_in">VARCHAR</span>) <span class="keyword">RETURNS</span> <span class="built_in">DATE</span> <span class="keyword">AS</span> $$</span><br><span class="line"><span class="keyword">DECLARE</span></span><br><span class="line">	temp <span class="built_in">INT</span>;</span><br><span class="line">	year_str VARCHAR DEFAULT substring($1, 7, 4);</span><br><span class="line">	mon_str VARCHAR DEFAULT substring($1, 11, 2);</span><br><span class="line">	day_str VARCHAR DEFAULT substring($1, 13, 2);</span><br><span class="line">	temp_str VARCHAR;</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">	temp_str := year_str || <span class="string">'-'</span> || mon_str || <span class="string">'-'</span> || day_str;</span><br><span class="line">	RETURN temp_str::DATE;</span><br><span class="line"><span class="keyword">END</span>;</span><br><span class="line">$$</span><br><span class="line">LANGUAGE plpgsql;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*通过身份证号得到性别*/</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">FUNCTION</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> get_gender_by_idcard(<span class="built_in">VARCHAR</span>);</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> get_gender_by_idcard(<span class="built_in">VARCHAR</span>) <span class="keyword">RETURNS</span> <span class="built_in">VARCHAR</span> <span class="keyword">AS</span> $$</span><br><span class="line"><span class="keyword">DECLARE</span></span><br><span class="line">	temp <span class="built_in">INT</span>;</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">	temp := <span class="keyword">CAST</span>(<span class="keyword">substring</span>($<span class="number">1</span>, <span class="number">17</span>, <span class="number">1</span>) <span class="keyword">AS</span> <span class="built_in">INTEGER</span>);</span><br><span class="line">	IF mod(temp, 2) &gt; 0 THEN</span><br><span class="line">		<span class="comment">/*男*/</span></span><br><span class="line">		RETURN '1';</span><br><span class="line">	ELSE</span><br><span class="line">		<span class="comment">/*女*/</span></span><br><span class="line">		RETURN '2';</span><br><span class="line">	<span class="keyword">END</span> <span class="keyword">IF</span>;</span><br><span class="line"><span class="keyword">END</span>;</span><br><span class="line">$$</span><br><span class="line">LANGUAGE plpgsql;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*得到一个随机名字*/</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">FUNCTION</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> get_random_name();</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> get_random_name() <span class="keyword">RETURNS</span> <span class="built_in">VARCHAR</span> <span class="keyword">AS</span> $$</span><br><span class="line"><span class="comment">/*随机生成一个名字*/</span></span><br><span class="line"><span class="keyword">DECLARE</span></span><br><span class="line">    boy_str <span class="built_in">VARCHAR</span> := <span class="string">'仲基,宗纬,长文,天明,志泽,明杰,弘文,烨伟,文博,天佑,文昊,修杰,苑博,鹏涛,炎彬,烨华,'</span> || </span><br><span class="line">		<span class="string">'煜祺,智宸,昊然,鹤轩,伟泽,哲瀚,雨泽,楷瑞,建辉,致远,俊驰,雨泽,烨磊,黎昕,青枫,旭尧,英杰,浩宇,峻熙,'</span> || </span><br><span class="line">		<span class="string">'嘉懿,煜城,圣杰,俊楠,鸿涛,伟祺,荣轩,君昊,熠彤,鸿煊,博涛,苑杰,黎昕,烨霖,懿轩,昊祯,龙恩,瑾瑜,伯懿,'</span> || </span><br><span class="line">		<span class="string">'伯毅,炫琰,金鑫,柠浩,嘉熙,贝玺,子默,思远,浩轩,语堂,昕宇,家宇,宇豪,宇鞅,宇轩,绍衡,鸿儒,鹏威,君浩,'</span> || </span><br><span class="line">		<span class="string">'昊东,子骞,博文,鸿飞,尚卿,尚博,峻熙,俊轩,冠佑,子丹,子文,伟霆,朝伟,富成,信哲,承哲,振东,杰伦,霸天,'</span> || </span><br><span class="line">		<span class="string">'天虎,宗宪,承豪,承浩,敏浩,珉浩,'</span> ||</span><br><span class="line">        <span class="string">'明,登,维,源,升,应,廷,绍,宗,兴,世,泽,继,祖,远,昌,荣,建,国,恒,光,辉,思,孝,友,在,朝,学,贤,能,俊,杰,'</span> ||</span><br><span class="line">        <span class="string">'挥,先,绪,英,雄,显,厚,立,敬,兴,贤,哲,诗,书,衔,吉,祥,渊,源,经,学,远,同,荣,智,永,芳,声,鸿,名,振,显,'</span> ||</span><br><span class="line">        <span class="string">'道,达,德,宣,扬,承,序,志,培,植,怡,谟,贵,善,良,修,齐,传,泽,厚,敦,睦,裕,基,长,本,固,枝,皆,茂,家,宜,'</span> ||</span><br><span class="line">        <span class="string">'枫,羽,聪,刚,斌,彬,彪,健,勇,鹏,强,植,睿,贝,渊,非,今,所,能,逆,料,也,子,孙,酌,而,易,之,又,吾,之,所'</span>;</span><br><span class="line">    girl_str VARCHAR := '梦夏,思涵,启维,思恩,诗涵,易涵,晶锦,莫愁,静琪,诗婧,诗茵,思颖,政颖,语嫣,娅维,世恩,' ||</span><br><span class="line">		'慧乔,紫晴,慧娴,雨晴,佳怡,心怡,静妍,梦雨,梦妍,梦冰,梦雪,淑仪,淑怡,亦菲,静姝,宝英,宝珍,' ||</span><br><span class="line">        '雪妍,维贞,雪莉,智英,静雅,茹芸,欣妍,雅雯,梦洁,梦瑶,碧晨,桂英,佳琳,家琳,晨曦,丞琳,雨欣,思雨,思露,凡华,' || </span><br><span class="line">		'千华,秀妍,雪琴,雪芹,凡,佳,嘉,琼,勤,珍,贞,莉,桂,' ||</span><br><span class="line">        '娣,叶,璧,娅,琦,晶,妍,茜,秋,珊,莎,锦,黛,青,倩,婷,姣,婉,娴,瑾,颖,露,瑶,怡,婵,雁,蓓,纨,仪,荷,丹,蓉,眉,' ||</span><br><span class="line">        '保,东,文,辉,力,明,永,健,世,广,志,义,兴,良,海,山,仁,波,宁,贵,福,生,龙,元,全,国,胜,学,祥,才,发,武,新,利,' ||</span><br><span class="line">        '清,飞,彬,富,顺,信,子,杰,涛,昌,成,康,星,光,天,达,安,岩,中,茂,进,林,有,坚,和,彪,博,诚,先,敬,震,振,壮,会,' ||</span><br><span class="line">        '思,群,豪,心,邦,承,乐,绍,功,松,善,厚,庆,磊,民,友,裕,河,哲,江,超,浩,亮,政,谦,亨,奇,固,之,轮,翰,朗,伯,宏,' ||</span><br><span class="line">        '静,颖,琪,巧,燕,梅,琦,维,霞,莉,凤,姝,琳,瑶,洁,璐,涵,蓉,姬,婵,雨,鸢,冰,梦,雪,娜,时,泰,盛,雄,琛,钧,冠,策';</span><br><span class="line">    boy_arr VARCHAR ARRAY := regexp_split_to_array(boy_str, E',');</span><br><span class="line">    girl_arr VARCHAR ARRAY := regexp_split_to_array(girl_str, E',');</span><br><span class="line">    ran_int INT := get_random_number(1, 100);</span><br><span class="line">    res VARCHAR;</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">IF</span> ran_int &lt; <span class="number">50</span> <span class="keyword">THEN</span></span><br><span class="line">        res := get_random_surname() || get_string_from_arr(girl_arr);</span><br><span class="line">    ELSE</span><br><span class="line">        res := get_random_surname() || get_string_from_arr(boy_arr);</span><br><span class="line">    <span class="keyword">END</span> <span class="keyword">IF</span>;</span><br><span class="line">    RETURN res;</span><br><span class="line"><span class="keyword">END</span>;</span><br><span class="line">$$</span><br><span class="line">LANGUAGE plpgsql;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*得到一个随机姓氏*/</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">FUNCTION</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> get_random_surname();</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> get_random_surname() <span class="keyword">RETURNS</span> <span class="built_in">VARCHAR</span> <span class="keyword">AS</span> $$</span><br><span class="line"><span class="comment">/*随机生成一个姓氏*/</span></span><br><span class="line"><span class="keyword">DECLARE</span></span><br><span class="line">    surname_str <span class="built_in">VARCHAR</span> := <span class="string">'赵,钱,孙,李,周,吴,郑,王,冯,陈,褚,卫,蒋,沈,韩,杨,朱,秦,尤,许,何,吕,施,'</span> || </span><br><span class="line">		<span class="string">'张,孔,曹,严,华,金,魏,陶,姜,戚,谢,邹,喻,柏,水,窦,章,云,苏,潘,葛,奚,范,彭,郎,鲁,韦,昌,马,苗,'</span> || </span><br><span class="line">		<span class="string">'凤,花,方,俞,任,袁,柳,酆,鲍,史,唐,费,廉,岑,薛,雷,贺,倪,汤,滕,殷,罗,毕,郝,邬,安,常,乐,于,时,'</span> || </span><br><span class="line">		<span class="string">'傅,皮,卞,齐,康,伍,余,元,卜,顾,孟,平,黄,和,穆,萧,尹,姚,邵,湛,汪,祁,毛,禹,狄,米,贝,明,臧,计,'</span> || </span><br><span class="line">		<span class="string">'伏,成,戴,谈,宋,茅,庞,熊,纪,舒,屈,项,祝,董,梁,杜,阮,蓝,闵,席,季,麻,强,贾,路,娄,危,江,童,颜,'</span> || </span><br><span class="line">		<span class="string">'郭,梅,盛,林,刁,锺,徐,邱,骆,高,夏,蔡,田,樊,胡,凌,霍,虞,万,支,柯,昝,管,卢,莫,经,房,裘,缪,干,'</span> || </span><br><span class="line">		<span class="string">'解,应,宗,丁,宣,贲,邓,郁,单,杭,洪,包,诸,左,石,崔,吉,钮,龚,程,嵇,邢,滑,裴,陆,荣,翁,荀,羊,於,'</span> || </span><br><span class="line">		<span class="string">'惠,甄,麴,家,封,芮,羿,储,靳,汲,邴,糜,松,井,段,富,巫,乌,焦,巴,弓,牧,隗,山,谷,车,侯,宓,蓬,全,'</span> || </span><br><span class="line">		<span class="string">'郗,班,仰,秋,仲,伊,宫,宁,仇,栾,暴,甘,钭,历,戎,祖,武,符,刘,景,詹,束,龙,叶,幸,司,韶,郜,黎,蓟,'</span> || </span><br><span class="line">		<span class="string">'溥,印,宿,白,怀,蒲,邰,从,鄂,索,咸,籍,赖,卓,蔺,屠,蒙,池,乔,阳,郁,胥,能,苍,双,闻,莘,党,翟,谭,'</span> || </span><br><span class="line">		<span class="string">'贡,劳,逄,姬,申,扶,堵,冉,宰,郦,雍,却,璩,桑,桂,濮,牛,寿,通,边,扈,燕,冀,僪,浦,尚,农,温,别,庄,'</span> || </span><br><span class="line">		<span class="string">'晏,柴,瞿,阎,充,慕,连,茹,习,宦,艾,鱼,容,向,古,易,慎,戈,廖,庾,终,暨,居,衡,步,都,耿,满,弘,匡,'</span> || </span><br><span class="line">		<span class="string">'国,文,寇,广,禄,阙,东,欧,殳,沃,利,蔚,越,夔,隆,师,巩,厍,聂,晁,勾,敖,融,冷,訾,辛,阚,那,简,饶,'</span> || </span><br><span class="line">		<span class="string">'空,曾,毋,沙,乜,养,鞠,须,丰,巢,关,蒯,相,查,后,荆,红,游,竺,权,逮,盍,益,桓,公,万俟,司马,上官,'</span> || </span><br><span class="line">		<span class="string">'欧阳,夏侯,诸葛,闻人,东方,赫连,皇甫,尉迟,百里,东郭,南门,呼延,归海'</span>;</span><br><span class="line">    surname_arr VARCHAR ARRAY := regexp_split_to_array(surname_str, E',');</span><br><span class="line">    res VARCHAR;</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    res := get_string_from_arr(surname_arr);</span><br><span class="line">    RETURN res;</span><br><span class="line"><span class="keyword">END</span>;</span><br><span class="line">$$</span><br><span class="line">LANGUAGE plpgsql;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*得到随机电话号码*/</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">FUNCTION</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> get_random_lxdh();</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> get_random_lxdh() <span class="keyword">RETURNS</span> <span class="built_in">VARCHAR</span> <span class="keyword">AS</span> $$</span><br><span class="line"><span class="keyword">DECLARE</span></span><br><span class="line">	tel_str <span class="built_in">VARCHAR</span> <span class="keyword">DEFAULT</span> <span class="string">'134,135,136,137,138,139,150,151,152,157,158,159,130,131,132,155,156,133,153,180,181,182,183'</span>;</span><br><span class="line">	tel_arr VARCHAR ARRAY := regexp_split_to_array(tel_str, E',');</span><br><span class="line">	temp VARCHAR;</span><br><span class="line">	res VARCHAR;</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">	temp := get_random_num_string(<span class="number">8</span>);</span><br><span class="line">	res := get_string_from_arr(tel_arr) || temp;</span><br><span class="line">	RETURN res;</span><br><span class="line"><span class="keyword">END</span>;</span><br><span class="line">$$</span><br><span class="line">LANGUAGE plpgsql;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*生成随机数字*/</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">FUNCTION</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> get_random_number(<span class="built_in">INT</span>, <span class="built_in">INT</span>);</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> get_random_number(<span class="built_in">INT</span>, <span class="built_in">INT</span>) <span class="keyword">RETURNS</span> <span class="built_in">INT</span> <span class="keyword">AS</span> $$</span><br><span class="line"><span class="comment">/*传入开始数和结束数，得到中间的一个随机数*/</span></span><br><span class="line"><span class="keyword">DECLARE</span></span><br><span class="line">    start_int <span class="keyword">ALIAS</span> <span class="keyword">FOR</span> $<span class="number">1</span> ; end_int ALIAS FOR $2 ;</span><br><span class="line"><span class="comment">/* 第一个数表示开始数，第二个数表示结束数*/</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">RETURN</span> trunc(</span><br><span class="line">        random() * (end_int - start_int + <span class="number">1</span>) + start_int</span><br><span class="line">    ) ;</span><br><span class="line"><span class="keyword">END</span> ;</span><br><span class="line">$$</span><br><span class="line">LANGUAGE plpgsql;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*从字符串数组随机获得一个字符*/</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">FUNCTION</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> get_string_from_arr(<span class="built_in">VARCHAR</span> <span class="built_in">ARRAY</span>);</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> get_string_from_arr(<span class="built_in">VARCHAR</span> <span class="built_in">ARRAY</span>) <span class="keyword">RETURNS</span> <span class="built_in">VARCHAR</span> <span class="keyword">AS</span> $$</span><br><span class="line"><span class="comment">/*从字符串数组随机获得一个字符,传入一个字符串数组*/</span></span><br><span class="line"><span class="keyword">DECLARE</span></span><br><span class="line">    res <span class="built_in">VARCHAR</span>;</span><br><span class="line">    arr ALIAS FOR $1;</span><br><span class="line">    len INT := array_length(arr, 1);</span><br><span class="line">    ran_int INT := get_random_number(1, len);</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    res := arr[ran_int];</span><br><span class="line">    RETURN res;</span><br><span class="line"><span class="keyword">END</span>;</span><br><span class="line">$$</span><br><span class="line">LANGUAGE plpgsql;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*得到一个指定长度的随机字符串*/</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">FUNCTION</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> get_random_string(<span class="built_in">INT</span>);</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> get_random_string(<span class="built_in">INT</span>) <span class="keyword">RETURNS</span> <span class="built_in">VARCHAR</span> <span class="keyword">AS</span> $$</span><br><span class="line"><span class="keyword">DECLARE</span></span><br><span class="line">    <span class="keyword">str</span> <span class="built_in">VARCHAR</span> <span class="keyword">DEFAULT</span> <span class="string">'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'</span> ;</span><br><span class="line">	res VARCHAR ;</span><br><span class="line"><span class="comment">/* 传入参数表示想获得多长的随机字符串 */</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    res = get_random_string(<span class="keyword">str</span>, $<span class="number">1</span>);</span><br><span class="line">	RETURN res ;</span><br><span class="line"><span class="keyword">END</span> ;</span><br><span class="line">$$</span><br><span class="line">LANGUAGE plpgsql;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*得到一个指定长度的随机纯数字字符串*/</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">FUNCTION</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> get_random_num_string(<span class="built_in">INT</span>);</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> get_random_num_string(<span class="built_in">INT</span>) <span class="keyword">RETURNS</span> <span class="built_in">VARCHAR</span> <span class="keyword">AS</span> $$</span><br><span class="line"><span class="keyword">DECLARE</span></span><br><span class="line">    <span class="keyword">str</span> <span class="built_in">VARCHAR</span> <span class="keyword">DEFAULT</span> <span class="string">'0123456789'</span> ;</span><br><span class="line">	res VARCHAR ;</span><br><span class="line"><span class="comment">/* 传入参数表示想获得多长的随机字符串 */</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    res = get_random_string(<span class="keyword">str</span>, $<span class="number">1</span>);</span><br><span class="line">	RETURN res ;</span><br><span class="line"><span class="keyword">END</span> ;</span><br><span class="line">$$</span><br><span class="line">LANGUAGE plpgsql;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*传入一个字符串，和想要得到的字符串长度，得到一个指定长度的随机字符串*/</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">FUNCTION</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> get_random_string(<span class="built_in">VARCHAR</span>,<span class="built_in">INT</span>);</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> get_random_string(<span class="built_in">VARCHAR</span>,<span class="built_in">INT</span>) <span class="keyword">RETURNS</span> <span class="built_in">VARCHAR</span> <span class="keyword">AS</span> $$</span><br><span class="line"><span class="keyword">DECLARE</span></span><br><span class="line">    <span class="keyword">str</span> <span class="keyword">ALIAS</span> <span class="keyword">FOR</span> $<span class="number">1</span>;</span><br><span class="line">	res VARCHAR ;</span><br><span class="line"><span class="comment">/* 传入参数表示想获得多长的随机字符串 */</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">SELECT</span></span><br><span class="line">        array_to_string(</span><br><span class="line">            <span class="built_in">ARRAY</span> (</span><br><span class="line">                <span class="keyword">SELECT</span></span><br><span class="line">                    <span class="keyword">SUBSTRING</span> (</span><br><span class="line">                        <span class="keyword">str</span></span><br><span class="line">                        <span class="keyword">FROM</span></span><br><span class="line">                            (</span><br><span class="line">                                <span class="keyword">CEIL</span> (random() * <span class="keyword">CHAR_LENGTH</span>(<span class="keyword">str</span>))</span><br><span class="line">                            ) :: <span class="built_in">INT</span> <span class="keyword">FOR</span> <span class="number">1</span></span><br><span class="line">                    )</span><br><span class="line">                <span class="keyword">FROM</span></span><br><span class="line">                    generate_series (<span class="number">1</span>, $<span class="number">2</span>)</span><br><span class="line">            ),</span><br><span class="line">            <span class="string">''</span></span><br><span class="line">        ) <span class="keyword">INTO</span> res ;</span><br><span class="line">	RETURN res ;</span><br><span class="line"><span class="keyword">END</span> ;</span><br><span class="line">$$</span><br><span class="line">LANGUAGE plpgsql;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*得到一个随机日期*/</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">FUNCTION</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> get_random_date(start_date <span class="built_in">date</span>, end_date <span class="built_in">date</span>);</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> get_random_date(start_date <span class="built_in">date</span>, end_date <span class="built_in">date</span>) <span class="keyword">RETURNS</span> <span class="built_in">DATE</span> <span class="keyword">AS</span> $$</span><br><span class="line"><span class="comment">/*传入开始日期和结束日期，得到其区间内的一个随机日期*/</span></span><br><span class="line"><span class="keyword">DECLARE</span>  </span><br><span class="line">    interval_days <span class="built_in">integer</span>;  </span><br><span class="line">    random_days integer;  </span><br><span class="line">    random_date DATE;  </span><br><span class="line"><span class="keyword">BEGIN</span>  </span><br><span class="line">    interval_days := end_date - start_date;  </span><br><span class="line">    random_days := get_random_number(0, interval_days); </span><br><span class="line">    random_date := start_date + random_days;  </span><br><span class="line">    RETURN random_date;  </span><br><span class="line"><span class="keyword">END</span>;  </span><br><span class="line">$$</span><br><span class="line">LANGUAGE plpgsql;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*得到一个随机timestamp*/</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">FUNCTION</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> get_random_datetime(start_date <span class="built_in">date</span>, end_date <span class="built_in">date</span>);</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> get_random_datetime(start_date <span class="built_in">date</span>, end_date <span class="built_in">date</span>) <span class="keyword">RETURNS</span> <span class="built_in">TIMESTAMP</span> <span class="keyword">AS</span> $$</span><br><span class="line"><span class="comment">/*传入开始日期和结束日期，得到其区间内的一个随机timestamp*/</span></span><br><span class="line"><span class="keyword">DECLARE</span>    </span><br><span class="line">	interval_days <span class="built_in">integer</span>; </span><br><span class="line">	random_seconds integer;  </span><br><span class="line">	random_dates integer;</span><br><span class="line">	random_date date;  </span><br><span class="line">	random_time time; </span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">	interval_days := end_date - start_date; </span><br><span class="line">	random_dates:= trunc(random() * interval_days);</span><br><span class="line">	random_date := start_date + random_dates; </span><br><span class="line">	random_seconds:= trunc(random() * 3600 * 24); </span><br><span class="line">	random_time:=' 00:00:00'::time + (random_seconds || ' second')::INTERVAL; </span><br><span class="line">	RETURN random_date + random_time; </span><br><span class="line"> <span class="keyword">END</span>;  </span><br><span class="line">$$</span><br><span class="line">LANGUAGE plpgsql;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*得到随机是和否，传入的参数表示多少概率得到的结果为是；比如传入参数为80，则百分之80的结果为是*/</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">FUNCTION</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> get_random_sf(<span class="built_in">INT</span>);</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> get_random_sf(<span class="built_in">INT</span>) <span class="keyword">RETURNS</span> <span class="built_in">VARCHAR</span> <span class="keyword">AS</span> $$</span><br><span class="line"><span class="keyword">DECLARE</span></span><br><span class="line">    c_result <span class="built_in">VARCHAR</span>(<span class="number">2</span>);</span><br><span class="line">    n_random INT;</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    n_random := trunc(random() * <span class="number">100</span>);</span><br><span class="line">    IF n_random &lt; $1 THEN</span><br><span class="line">        c_result := '1';</span><br><span class="line">    ELSE</span><br><span class="line">        c_result := '2';</span><br><span class="line">    <span class="keyword">END</span> <span class="keyword">IF</span>;</span><br><span class="line">    RETURN c_result;</span><br><span class="line"><span class="keyword">END</span>;</span><br><span class="line">$$</span><br><span class="line">LANGUAGE plpgsql;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*得到居民家庭类型,也可用于得到随机的1,2,3,*/</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">FUNCTION</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> get_random_three();</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> get_random_three() <span class="keyword">RETURNS</span> <span class="built_in">VARCHAR</span> <span class="keyword">AS</span> $$</span><br><span class="line"><span class="keyword">DECLARE</span> </span><br><span class="line">	jtlx_arr <span class="built_in">VARCHAR</span> <span class="built_in">ARRAY</span> := <span class="built_in">ARRAY</span>[<span class="string">'1'</span>,<span class="string">'2'</span>,<span class="string">'3'</span>];</span><br><span class="line">	ranNum INT := get_random_number(1, 3);</span><br><span class="line">	res VARCHAR;</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">	res := arr[ranNum];</span><br><span class="line">	RETURN res;</span><br><span class="line"><span class="keyword">END</span> ; </span><br><span class="line">$$</span><br><span class="line">LANGUAGE plpgsql;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*得到随机的1,2,3,4*/</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">FUNCTION</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> get_random_four();</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> get_random_four() <span class="keyword">RETURNS</span> <span class="built_in">VARCHAR</span> <span class="keyword">AS</span> $$</span><br><span class="line"><span class="keyword">DECLARE</span> </span><br><span class="line">	arr <span class="built_in">VARCHAR</span> <span class="built_in">ARRAY</span> := <span class="built_in">ARRAY</span>[<span class="string">'1'</span>,<span class="string">'2'</span>,<span class="string">'3'</span>,<span class="string">'4'</span>];</span><br><span class="line">	ranNum INT := get_random_number(1, 4);</span><br><span class="line">	res VARCHAR;</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">	res := arr[ranNum];</span><br><span class="line">	RETURN res;</span><br><span class="line"><span class="keyword">END</span> ;</span><br><span class="line">$$</span><br><span class="line">LANGUAGE plpgsql;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*得到随机的1,2,3,4,5*/</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">FUNCTION</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> get_random_five();</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> get_random_five() <span class="keyword">RETURNS</span> <span class="built_in">VARCHAR</span> <span class="keyword">AS</span> $$</span><br><span class="line"> <span class="keyword">DECLARE</span> </span><br><span class="line">	arr <span class="built_in">VARCHAR</span> <span class="built_in">ARRAY</span> := <span class="built_in">ARRAY</span>[<span class="string">'1'</span>,<span class="string">'2'</span>,<span class="string">'3'</span>,<span class="string">'4'</span>,<span class="string">'5'</span>];</span><br><span class="line">	ranNum INT := get_random_number(1, 5);</span><br><span class="line">	res VARCHAR;</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">	res := arr[ranNum];</span><br><span class="line">	RETURN res;</span><br><span class="line"><span class="keyword">END</span> ; </span><br><span class="line">$$</span><br><span class="line">LANGUAGE plpgsql;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*释放死锁*/</span><span class="comment">/* </span></span><br><span class="line"><span class="comment">DROP FUNCTION IF EXISTS cancel_lock(VARCHAR);</span></span><br><span class="line"><span class="comment">CREATE FUNCTION cancel_lock(VARCHAR) RETURNS void AS $$</span></span><br><span class="line"><span class="comment">DECLARE </span></span><br><span class="line"><span class="comment">	tableName ALIAS FOR $1; </span></span><br><span class="line"><span class="comment">	c_ref refcursor;</span></span><br><span class="line"><span class="comment">	res record;</span></span><br><span class="line"><span class="comment">BEGIN</span></span><br><span class="line"><span class="comment">	OPEN c_ref FOR SELECT aa.pid FROM pg_stat_activity aa,</span></span><br><span class="line"><span class="comment">			(</span></span><br><span class="line"><span class="comment">				SELECT</span></span><br><span class="line"><span class="comment">					A .locktype,</span></span><br><span class="line"><span class="comment">					A . DATABASE,</span></span><br><span class="line"><span class="comment">					A .pid,</span></span><br><span class="line"><span class="comment">					A . MODE,</span></span><br><span class="line"><span class="comment">					A .relation,</span></span><br><span class="line"><span class="comment">					b.relname</span></span><br><span class="line"><span class="comment">				FROM</span></span><br><span class="line"><span class="comment">					pg_locks A</span></span><br><span class="line"><span class="comment">				JOIN pg_class b ON A .relation = b.oid</span></span><br><span class="line"><span class="comment">				WHERE</span></span><br><span class="line"><span class="comment">					UPPER (b.relname) = tableName</span></span><br><span class="line"><span class="comment">			) bb</span></span><br><span class="line"><span class="comment">			WHERE</span></span><br><span class="line"><span class="comment">				aa.pid = bb.pid</span></span><br><span class="line"><span class="comment">			AND aa.waiting = 't'</span></span><br><span class="line"><span class="comment">	FETCH c_ref INTO res;</span></span><br><span class="line"><span class="comment">	while FOUND LOOP</span></span><br><span class="line"><span class="comment">		select pg_cancel_backend(res.pid);</span></span><br><span class="line"><span class="comment">		FETCH c_ref INTO res;</span></span><br><span class="line"><span class="comment">	END LOOP;</span></span><br><span class="line"><span class="comment">END ; </span></span><br><span class="line"><span class="comment">$$</span></span><br><span class="line"><span class="comment">LANGUAGE plpgsql; */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*更新主键cbh*/</span></span><br><span class="line"><span class="comment">/* DROP FUNCTION IF EXISTS update_cbh();</span></span><br><span class="line"><span class="comment">CREATE FUNCTION update_cbh() RETURNS INT AS $$</span></span><br><span class="line"><span class="comment">DECLARE </span></span><br><span class="line"><span class="comment">	icount INT DEFAULT 0;</span></span><br><span class="line"><span class="comment">	random_str VARCHAR DEFAULT get_random_string(32);</span></span><br><span class="line"><span class="comment">	c_ref refcursor;</span></span><br><span class="line"><span class="comment">	res record;</span></span><br><span class="line"><span class="comment">BEGIN</span></span><br><span class="line"><span class="comment">	OPEN c_ref FOR SELECT * FROM db_mozhengfly.t_user;</span></span><br><span class="line"><span class="comment">	FETCH c_ref INTO res;</span></span><br><span class="line"><span class="comment">	while FOUND LOOP</span></span><br><span class="line"><span class="comment">		icount := icount + 1;</span></span><br><span class="line"><span class="comment">		update db_mozhengfly.t_user set c_bh = gen_uuid(random_str, icount) where c_bh = res.c_bh;</span></span><br><span class="line"><span class="comment">		FETCH c_ref INTO res;</span></span><br><span class="line"><span class="comment">	END LOOP;</span></span><br><span class="line"><span class="comment">	return icount;</span></span><br><span class="line"><span class="comment">END ; </span></span><br><span class="line"><span class="comment">$$</span></span><br><span class="line"><span class="comment">LANGUAGE plpgsql; */</span></span><br></pre></td></tr></table></figure>

<h2 id="存储过程"><a href="#存储过程" class="headerlink" title="存储过程"></a>存储过程</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">FUNCTION</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> gen_user_data(<span class="built_in">INT</span>);</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> gen_user_data(<span class="built_in">INT</span>) <span class="keyword">RETURNS</span> <span class="built_in">INTEGER</span> <span class="keyword">AS</span> $$</span><br><span class="line"><span class="keyword">DECLARE</span></span><br><span class="line">	icount <span class="keyword">ALIAS</span> <span class="keyword">FOR</span> $<span class="number">1</span>;</span><br><span class="line">	random_str VARCHAR DEFAULT get_random_string(32);</span><br><span class="line">	start_date DATE DEFAULT get_random_date('2017-05-01','2017-06-01');</span><br><span class="line">	end_date DATE DEFAULT get_random_date('2017-06-01','2017-07-01');</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">	<span class="keyword">FOR</span> i <span class="keyword">IN</span> <span class="number">1.</span>.icount <span class="keyword">LOOP</span></span><br><span class="line">		<span class="keyword">INSERT</span> <span class="keyword">INTO</span> db_mozhengfly.t_user <span class="keyword">VALUES</span> (gen_uuid(random_str, i), <span class="string">'这是第'</span> || i || <span class="string">'们'</span>, get_random_number(<span class="number">4</span>, <span class="number">10</span>), get_random_number(<span class="number">4</span>, <span class="number">10</span>),</span><br><span class="line">				start_date, end_date, get_random_sf(<span class="number">50</span>), get_random_string(<span class="number">16</span>));</span><br><span class="line">	<span class="keyword">END</span> <span class="keyword">LOOP</span>;</span><br><span class="line">	RETURN icount;</span><br><span class="line"><span class="keyword">END</span>;</span><br><span class="line">$$</span><br><span class="line">LANGUAGE plpgsql;</span><br></pre></td></tr></table></figure>

<h2 id="处理数据的存储过程"><a href="#处理数据的存储过程" class="headerlink" title="处理数据的存储过程"></a>处理数据的存储过程</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> <span class="keyword">REPLACE</span> <span class="keyword">FUNCTION</span> process_zcfz_bb_history_data () <span class="keyword">RETURNS</span> <span class="built_in">VARCHAR</span> <span class="keyword">AS</span> $$ </span><br><span class="line"><span class="keyword">DECLARE</span></span><br><span class="line">	res <span class="built_in">VARCHAR</span> := <span class="string">''</span>;</span><br><span class="line">	single_res VARCHAR := '';</span><br><span class="line">	c_ref refcursor;</span><br><span class="line">	v_record record;</span><br><span class="line">	exp_arr VARCHAR ARRAY;</span><br><span class="line">	data_val NUMERIC;</span><br><span class="line">	</span><br><span class="line">	v_val_record record;</span><br><span class="line">	</span><br><span class="line">	var_a record;</span><br><span class="line">	var_b record;</span><br><span class="line">	</span><br><span class="line">	executePrSql VARCHAR;</span><br><span class="line">	</span><br><span class="line">	i_status INT := 0;</span><br><span class="line">	update_sql VARCHAR;</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">	<span class="keyword">OPEN</span> c_ref <span class="keyword">FOR</span> (<span class="keyword">select</span> bh, <span class="keyword">data</span>, <span class="keyword">exp</span> <span class="keyword">from</span> table_user);</span><br><span class="line">	FETCH c_ref INTO v_record;</span><br><span class="line">	<span class="comment">-- 循环处理数据</span></span><br><span class="line">	WHILE FOUND LOOP</span><br><span class="line">		data_val := 0;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">-- 解析exp</span></span><br><span class="line">		exp_arr := regexp_split_to_array(v_record.exp, '\+');</span><br><span class="line">		<span class="comment">-- 数组循环</span></span><br><span class="line">		FOR var IN array_lower(exp_arr, 1)..array_upper(exp_arr, 1) LOOP</span><br><span class="line"><span class="comment">-- 			RAISE NOTICE 'exp :  % [%]', v_record.c_bh, exp_arr[var];</span></span><br><span class="line">			IF position('-' in exp_arr[var]) &gt; 0 THEN</span><br><span class="line">				exp_arr := regexp_split_to_array(v_record.exp, '-');</span><br><span class="line">				executePrSql := '<span class="keyword">select</span> * <span class="keyword">from</span> t_test<span class="string">';</span></span><br><span class="line"><span class="string">				EXECUTE executePrSql INTO var_a;</span></span><br><span class="line"><span class="string">				executePrSql := '</span><span class="keyword">select</span> * <span class="keyword">from</span> t_test<span class="string">';</span></span><br><span class="line"><span class="string">				EXECUTE executePrSql INTO var_b;</span></span><br><span class="line"><span class="string">				</span></span><br><span class="line"><span class="string">				data_val := var_a.data_val - var_b.data_val;</span></span><br><span class="line"><span class="string">			ELSE</span></span><br><span class="line"><span class="string">				executePrSql := '</span><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">test</span><span class="string">';</span></span><br><span class="line"><span class="string">-- 			RAISE NOTICE '</span><span class="keyword">SQL</span> : %<span class="string">', executePrSql;</span></span><br><span class="line"><span class="string">			</span></span><br><span class="line"><span class="string">				EXECUTE executePrSql INTO v_val_record;</span></span><br><span class="line"><span class="string">				</span></span><br><span class="line"><span class="string">				data_val := data_val + v_val_record.data_val;</span></span><br><span class="line"><span class="string">			END IF;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">		END LOOP;</span></span><br><span class="line"><span class="string">		</span></span><br><span class="line"><span class="string">		i_status := 0;</span></span><br><span class="line"><span class="string">		IF data_val != v_record.data_val THEN</span></span><br><span class="line"><span class="string">				RAISE NOTICE '</span>提示 [data_val][%] 结果不等:  计算结果 [%] 数据库值 [%]<span class="string">', v_record.c_bbzd, qc_val, v_record.n_qcye;</span></span><br><span class="line"><span class="string">				i_status := 1;</span></span><br><span class="line"><span class="string">		END IF;</span></span><br><span class="line"><span class="string">		IF i_status &gt; 0 THEN</span></span><br><span class="line"><span class="string">				update_sql := '</span><span class="keyword">update</span> <span class="keyword">test</span> <span class="keyword">set</span> data_val = <span class="string">' || data_val || '</span> <span class="keyword">where</span> c_bh = <span class="string">''' || v_record.c_bh || '''';</span></span><br><span class="line"><span class="string">				RAISE NOTICE '</span>执行更新: [%]<span class="string">', update_sql;</span></span><br><span class="line"><span class="string">				EXECUTE update_sql;</span></span><br><span class="line"><span class="string">		END IF;</span></span><br><span class="line"><span class="string">		</span></span><br><span class="line"><span class="string">		FETCH c_ref INTO v_record;</span></span><br><span class="line"><span class="string">	END LOOP;</span></span><br><span class="line"><span class="string">	</span></span><br><span class="line"><span class="string">	RETURN res;</span></span><br><span class="line"><span class="string">END;</span></span><br><span class="line"><span class="string">$$ LANGUAGE plpgsql;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Sql</category>
      </categories>
      <tags>
        <tag>存储过程</tag>
      </tags>
  </entry>
  <entry>
    <title>SqlServer存储过程</title>
    <url>/2020/08/06/Sql/SqlServer/</url>
    <content><![CDATA[<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">IF object_id('v_random', 'v') IS NOT NULL</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">VIEW</span> v_random;</span><br><span class="line">go</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> v_random <span class="keyword">AS</span> <span class="keyword">select</span> <span class="keyword">rand</span>() <span class="keyword">AS</span> random;</span><br><span class="line">go</span><br><span class="line"></span><br><span class="line">IF object_id('getRandomString', 'fn') IS NOT NULL</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">FUNCTION</span> getRandomString;</span><br><span class="line">go</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> getRandomString (@<span class="keyword">length</span> <span class="built_in">INT</span>) <span class="keyword">RETURNS</span> <span class="keyword">nvarchar</span> (<span class="number">300</span>) <span class="keyword">AS</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">DECLARE</span> @<span class="keyword">result</span> <span class="keyword">nvarchar</span> (<span class="number">300</span>)</span><br><span class="line"><span class="keyword">DECLARE</span> @i <span class="built_in">INT</span></span><br><span class="line"><span class="keyword">DECLARE</span> @random <span class="built_in">INT</span></span><br><span class="line"><span class="keyword">DECLARE</span> @<span class="keyword">String</span> <span class="built_in">VARCHAR</span> (<span class="number">3000</span>)</span><br><span class="line"><span class="keyword">DECLARE</span> @StringLen <span class="built_in">INT</span></span><br><span class="line"><span class="keyword">SET</span> @<span class="keyword">String</span> = <span class="string">'你哈三联的看法静安寺发是大佛那我可杰尔夫爱上对方爱上对方卡，闪电发货阿萨德发我IE回访人爱上对方你说地方我安委会发撒旦法师的发文发送到发几十块答复函打发哦wise发'</span></span><br><span class="line"><span class="keyword">SET</span> @StringLen = <span class="keyword">LEN</span>(@<span class="keyword">String</span>)</span><br><span class="line"><span class="keyword">SET</span> @<span class="keyword">result</span> = <span class="string">''</span></span><br><span class="line"><span class="keyword">SET</span> @i = <span class="number">0</span></span><br><span class="line"><span class="keyword">WHILE</span> @i &lt; @<span class="keyword">length</span></span><br><span class="line">	<span class="keyword">BEGIN</span></span><br><span class="line">		<span class="keyword">SELECT</span> @random = <span class="keyword">ceiling</span>(random *@StringLen) <span class="keyword">FROM</span> v_random</span><br><span class="line">		<span class="keyword">SET</span> @<span class="keyword">result</span> = @<span class="keyword">result</span> + <span class="keyword">SUBSTRING</span> (@<span class="keyword">String</span>, @random, <span class="number">1</span>)</span><br><span class="line">		<span class="keyword">SET</span> @i = @i + <span class="number">1</span></span><br><span class="line">	<span class="keyword">END</span></span><br><span class="line"><span class="keyword">RETURN</span> (@<span class="keyword">result</span>)</span><br><span class="line"><span class="keyword">END</span></span><br><span class="line"><span class="keyword">go</span></span><br></pre></td></tr></table></figure>

<h2 id="存储过程"><a href="#存储过程" class="headerlink" title="存储过程"></a>存储过程</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">IF EXISTS (</span><br><span class="line">	<span class="keyword">SELECT</span></span><br><span class="line">		*</span><br><span class="line">	<span class="keyword">FROM</span></span><br><span class="line">		SYSOBJECTS</span><br><span class="line">	<span class="keyword">WHERE</span></span><br><span class="line">		<span class="keyword">NAME</span> = <span class="string">'createData'</span></span><br><span class="line">) <span class="keyword">DROP</span> <span class="keyword">PROCEDURE</span> createData</span><br><span class="line"><span class="keyword">GO</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> createData</span><br><span class="line">@<span class="keyword">COUNT</span> <span class="built_in">INT</span> = <span class="number">10</span></span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">	<span class="comment">-- 变量声明</span></span><br><span class="line">	<span class="keyword">DECLARE</span> @i <span class="built_in">INT</span></span><br><span class="line">	<span class="keyword">DECLARE</span> @j <span class="built_in">INT</span></span><br><span class="line">	<span class="keyword">DECLARE</span> @SBJL_ID <span class="built_in">VARCHAR</span>(<span class="number">32</span>)</span><br><span class="line">	<span class="keyword">DECLARE</span> @MX_ID <span class="built_in">VARCHAR</span>(<span class="number">32</span>)</span><br><span class="line">	<span class="keyword">DECLARE</span> @ZF_ID <span class="built_in">VARCHAR</span>(<span class="number">32</span>)</span><br><span class="line">	<span class="keyword">DECLARE</span> @_ID <span class="built_in">VARCHAR</span></span><br><span class="line">	<span class="comment">-- 游标</span></span><br><span class="line">	<span class="keyword">DECLARE</span> @xh <span class="built_in">INT</span></span><br><span class="line">	<span class="keyword">DECLARE</span> @sbwz <span class="built_in">VARCHAR</span>(<span class="number">300</span>)</span><br><span class="line">	<span class="keyword">DECLARE</span> MX_CURSOR <span class="keyword">CURSOR</span> <span class="keyword">FOR</span> <span class="keyword">SELECT</span> N_XH, C_SBWZ <span class="keyword">FROM</span> DB_TEMP</span><br><span class="line">	<span class="comment">-- 游标</span></span><br><span class="line">	<span class="keyword">DECLARE</span> @CY <span class="built_in">VARCHAR</span>(<span class="number">300</span>)</span><br><span class="line">	<span class="keyword">DECLARE</span> @LB <span class="built_in">VARCHAR</span>(<span class="number">300</span>)</span><br><span class="line">	<span class="keyword">DECLARE</span> MGC_RC_CURSOR <span class="keyword">CURSOR</span> <span class="keyword">FOR</span> <span class="keyword">SELECT</span> C_CY, C_LB <span class="keyword">FROM</span> DB_TEMP2</span><br><span class="line">	<span class="comment">-- 生成主表数据</span></span><br><span class="line">	<span class="keyword">SET</span> @i = <span class="number">0</span></span><br><span class="line">	<span class="keyword">SET</span> @j = <span class="number">0</span></span><br><span class="line">	<span class="keyword">WHILE</span> @i &lt; @<span class="keyword">COUNT</span></span><br><span class="line">	<span class="keyword">BEGIN</span></span><br><span class="line">		<span class="keyword">SET</span> @i = @i + <span class="number">1</span></span><br><span class="line">		<span class="keyword">SET</span> @SBJL_ID = <span class="string">'1102309192818392010912'</span>+<span class="keyword">RIGHT</span>(<span class="string">'00000000000'</span> + <span class="keyword">CAST</span>(@i <span class="keyword">AS</span> <span class="built_in">VARCHAR</span>), <span class="number">10</span>)</span><br><span class="line"> 		<span class="keyword">SET</span> @ZF_ID = <span class="string">'00d968542fc92de38662b7d9baae2e1b'</span></span><br><span class="line">		<span class="keyword">INSERT</span> <span class="keyword">INTO</span> DB_TEMP3 <span class="keyword">VALUES</span>(@SBJL_ID, @ZF_ID, <span class="keyword">GETDATE</span>())	</span><br><span class="line">		<span class="comment">-- 插入数据</span></span><br><span class="line">		<span class="keyword">OPEN</span> MX_CURSOR</span><br><span class="line">		<span class="keyword">FETCH</span> <span class="keyword">NEXT</span> <span class="keyword">FROM</span> MX_CURSOR <span class="keyword">INTO</span> @xh, @sbwz</span><br><span class="line">		<span class="keyword">WHILE</span> @@FETCH_STATUS=<span class="number">0</span></span><br><span class="line">		<span class="keyword">BEGIN</span></span><br><span class="line">			<span class="keyword">SET</span> @j = @j + <span class="number">1</span></span><br><span class="line">			<span class="keyword">SET</span> @MX_ID = <span class="string">'1102309192818392010912'</span>+<span class="keyword">RIGHT</span>(<span class="string">'00000000000'</span> + <span class="keyword">CAST</span>(@j <span class="keyword">AS</span> <span class="built_in">VARCHAR</span>), <span class="number">10</span>)</span><br><span class="line">			<span class="keyword">INSERT</span> <span class="keyword">INTO</span> DB_TEMP4 <span class="keyword">VALUES</span>(@MX_ID, @SBJL_ID, @xh, @sbwz, <span class="keyword">GETDATE</span>(), <span class="string">'1'</span>)</span><br><span class="line">			<span class="comment">-- 判断</span></span><br><span class="line">			<span class="keyword">OPEN</span> MGC_RC_CURSOR</span><br><span class="line">			<span class="keyword">FETCH</span> <span class="keyword">NEXT</span> <span class="keyword">FROM</span> MGC_RC_CURSOR <span class="keyword">INTO</span> @CY, @LB </span><br><span class="line">			<span class="keyword">WHILE</span> @@FETCH_STATUS=<span class="number">0</span></span><br><span class="line">			<span class="keyword">BEGIN</span></span><br><span class="line">				<span class="keyword">IF</span> (<span class="keyword">CHARINDEX</span>(@CY,@sbwz) &gt; <span class="number">0</span>)</span><br><span class="line">				<span class="keyword">BEGIN</span></span><br><span class="line">					<span class="keyword">IF</span> (@LB = <span class="string">'1'</span>)</span><br><span class="line">						<span class="keyword">INSERT</span> <span class="keyword">INTO</span> DB_TEMP5 <span class="keyword">VALUES</span> (<span class="keyword">REPLACE</span>(NEWID(), <span class="string">'-'</span>, <span class="string">''</span>), @MX_ID, @CY)</span><br><span class="line">					<span class="keyword">ELSE</span> </span><br><span class="line">						<span class="keyword">INSERT</span> <span class="keyword">INTO</span> DB_TEMP6 <span class="keyword">VALUES</span> (<span class="keyword">REPLACE</span>(NEWID(), <span class="string">'-'</span>, <span class="string">''</span>), @MX_ID, @CY)</span><br><span class="line">				<span class="keyword">END</span></span><br><span class="line">				<span class="keyword">FETCH</span> <span class="keyword">NEXT</span> <span class="keyword">FROM</span> MGC_RC_CURSOR <span class="keyword">INTO</span> @CY, @LB </span><br><span class="line">			<span class="keyword">END</span></span><br><span class="line">			<span class="keyword">CLOSE</span> MGC_RC_CURSOR</span><br><span class="line">			<span class="comment">-- 下一行</span></span><br><span class="line">			<span class="keyword">FETCH</span> <span class="keyword">NEXT</span> <span class="keyword">FROM</span> MX_CURSOR <span class="keyword">INTO</span> @xh, @sbwz</span><br><span class="line">		<span class="keyword">END</span></span><br><span class="line">		<span class="keyword">CLOSE</span> MX_CURSOR</span><br><span class="line">	<span class="keyword">END</span></span><br><span class="line">	<span class="keyword">DEALLOCATE</span> MX_CURSOR</span><br><span class="line">	<span class="keyword">DEALLOCATE</span> MGC_RC_CURSOR</span><br><span class="line"><span class="keyword">END</span></span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">IF EXISTS (</span><br><span class="line">	<span class="keyword">SELECT</span></span><br><span class="line">		*</span><br><span class="line">	<span class="keyword">FROM</span></span><br><span class="line">		SYSOBJECTS</span><br><span class="line">	<span class="keyword">WHERE</span></span><br><span class="line">		<span class="keyword">NAME</span> = <span class="string">'updateData'</span></span><br><span class="line">) <span class="keyword">DROP</span> <span class="keyword">PROCEDURE</span> updateData</span><br><span class="line"><span class="keyword">GO</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> updateData</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">	<span class="comment">-- 变量声明</span></span><br><span class="line">	<span class="comment">-- 游标</span></span><br><span class="line">	<span class="keyword">DECLARE</span> @F_ID <span class="built_in">VARCHAR</span>(<span class="number">32</span>)</span><br><span class="line">	<span class="keyword">DECLARE</span> @SBJL_ID <span class="built_in">VARCHAR</span>(<span class="number">32</span>)</span><br><span class="line">	<span class="keyword">DECLARE</span> @i <span class="built_in">INT</span></span><br><span class="line">	<span class="keyword">DECLARE</span> @SBJL_COUNT <span class="built_in">INT</span></span><br><span class="line">	<span class="keyword">DECLARE</span> @ZFXX_COUNT <span class="built_in">INT</span></span><br><span class="line">	<span class="keyword">DECLARE</span> SBJL_CURSOR <span class="keyword">CURSOR</span> <span class="keyword">FOR</span> <span class="keyword">SELECT</span> C_ID <span class="keyword">FROM</span> DB_TEMP</span><br><span class="line">	<span class="keyword">DECLARE</span> ZFXX_CURSOR <span class="keyword">CURSOR</span> <span class="keyword">SCROLL</span> <span class="keyword">FOR</span> <span class="keyword">SELECT</span> C_ID <span class="keyword">FROM</span> DB_TEMP2</span><br><span class="line">	<span class="keyword">SELECT</span> @SBJL_COUNT = <span class="keyword">COUNT</span>(*) <span class="keyword">FROM</span> DB_TEMP</span><br><span class="line">	<span class="keyword">SELECT</span> @ZFXX_COUNT = <span class="keyword">COUNT</span>(*) <span class="keyword">FROM</span> DB_TEMP2</span><br><span class="line">	<span class="keyword">SET</span> @i = <span class="number">0</span></span><br><span class="line">	<span class="keyword">OPEN</span> SBJL_CURSOR</span><br><span class="line">	<span class="keyword">FETCH</span> <span class="keyword">NEXT</span> <span class="keyword">FROM</span> SBJL_CURSOR <span class="keyword">INTO</span> @SBJL_ID</span><br><span class="line">	<span class="keyword">WHILE</span> @@FETCH_STATUS=<span class="number">0</span></span><br><span class="line">	<span class="keyword">BEGIN</span></span><br><span class="line">		<span class="keyword">IF</span> (@i &gt;= @ZFXX_COUNT)</span><br><span class="line">		  <span class="keyword">SET</span> @i = <span class="number">1</span>;</span><br><span class="line">		ELSE</span><br><span class="line">			<span class="keyword">SET</span> @i = @i + <span class="number">1</span></span><br><span class="line">		<span class="keyword">OPEN</span> ZFXX_CURSOR</span><br><span class="line">		<span class="keyword">FETCH</span> <span class="keyword">ABSOLUTE</span> @i <span class="keyword">FROM</span> ZFXX_CURSOR <span class="keyword">INTO</span> @F_ID</span><br><span class="line">		<span class="keyword">CLOSE</span> ZFXX_CURSOR</span><br><span class="line">		<span class="keyword">UPDATE</span> DB_TEMP <span class="keyword">SET</span> C_F_ID = @F_ID <span class="keyword">WHERE</span> C_ID = @SBJL_ID</span><br><span class="line">		<span class="comment">-- 更新罪犯数据</span></span><br><span class="line">		<span class="keyword">FETCH</span> <span class="keyword">NEXT</span> <span class="keyword">FROM</span> SBJL_CURSOR <span class="keyword">INTO</span> @SBJL_ID</span><br><span class="line">	<span class="keyword">END</span></span><br><span class="line">	<span class="keyword">CLOSE</span> SBJL_CURSOR</span><br><span class="line">	<span class="keyword">DEALLOCATE</span> ZFXX_CURSOR</span><br><span class="line">	<span class="keyword">DEALLOCATE</span> SBJL_CURSOR</span><br><span class="line"><span class="keyword">END</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Sql</category>
      </categories>
      <tags>
        <tag>存储过程</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker</title>
    <url>/2024/04/30/docker/docker/</url>
    <content><![CDATA[<h3 id="Rabbitmq"><a href="#Rabbitmq" class="headerlink" title="Rabbitmq"></a>Rabbitmq</h3><p><code>docker</code>中直接启动一个<code>rabbitmq</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d --name rabbitmq -e RABBITMQ_DEFAULT_USER=admin -e RABBITMQ_DEFAULT_PASS=123456 -p 15672:15672 -p 5672:5672 rabbitmq:management</span><br></pre></td></tr></table></figure>

<h3 id="Docker-命令"><a href="#Docker-命令" class="headerlink" title="Docker 命令"></a>Docker 命令</h3><table>
<thead>
<tr>
<th>命令</th>
<th>注释</th>
</tr>
</thead>
<tbody><tr>
<td>docker images –q</td>
<td>查看所有镜像Id</td>
</tr>
<tr>
<td>docker images -q -f dangling=true</td>
<td>查看没有标签的虚悬镜像(dangling image)</td>
</tr>
<tr>
<td>docker rmi $(docker images -q -f dangling=true )</td>
<td>删除所有虚悬镜像</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Java-8</title>
    <url>/2022/12/02/jvm/Java-8/</url>
    <content><![CDATA[<h2 id="流相关操作"><a href="#流相关操作" class="headerlink" title="流相关操作"></a>流相关操作</h2><h3 id="reduce-把数组转成树"><a href="#reduce-把数组转成树" class="headerlink" title="reduce 把数组转成树"></a>reduce 把数组转成树</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 找到所有的根节点</span></span><br><span class="line">         List&lt;TreeNode&gt; rootNode = allNodes.stream()</span><br><span class="line">                 .filter(TreeNode::isRootNode)</span><br><span class="line">                 .sorted(Comparator.comparing(TreeNode::getOrder))</span><br><span class="line">                 .collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">         <span class="comment">// 为每个根节点设置children</span></span><br><span class="line">         rootNode.forEach(ele -&gt; &#123;</span><br><span class="line">             List&lt;TreeNode&gt; chilren = allNodes.stream().reduce(<span class="keyword">new</span> ArrayList&lt;&gt;(), (list, current) -&gt; &#123;</span><br><span class="line">                 List&lt;TreeNode&gt; currentChildren = allNodes.stream()</span><br><span class="line">                         .filter(e -&gt; StringUtils.equals(e.getParentId(), current.getId()))</span><br><span class="line">                         .map(TreeNode::cloneNode)</span><br><span class="line">                         .sorted(Comparator.comparing(TreeNode::getOrder))</span><br><span class="line">                         .collect(Collectors.toList());</span><br><span class="line">                 current.setChildren(currentChildren);</span><br><span class="line">                 <span class="keyword">if</span> (StringUtils.equals(ele.getId(), current.getParentId())) &#123;</span><br><span class="line">                     list.add(current.cloneNode());</span><br><span class="line">                 &#125;</span><br><span class="line">                 <span class="keyword">return</span> list;</span><br><span class="line">             &#125;, (list, list2) -&gt; list);</span><br><span class="line">             ele.setChildren(chilren);</span><br><span class="line">         &#125;);</span><br></pre></td></tr></table></figure>

<h3 id="分组的时候把value值映射"><a href="#分组的时候把value值映射" class="headerlink" title="分组的时候把value值映射"></a>分组的时候把value值映射</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;String, String&gt; map = list.stream().collect(Collectors</span><br><span class="line">                .groupingBy(Bean::getCode, Collectors.mapping(Bean::getName, Collectors.joining(<span class="string">","</span>))));</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java</category>
      </categories>
  </entry>
  <entry>
    <title>JVM类加载器</title>
    <url>/2020/12/05/jvm/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8/</url>
    <content><![CDATA[<h2 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h2><h3 id="类与类加载器"><a href="#类与类加载器" class="headerlink" title="类与类加载器"></a>类与类加载器</h3><p>对于任意一个类，都必须由加载它的类加载器和这个类本身一起共同确立其在Java虚拟机中的唯一性，每一个类加载器，都拥有一个独立的类名称空间。这句话可以表达得更通俗一些：比较两个类是否“相等”，只有在这两个类是由同一个类加载器加载的前提下才有意义，否则，即使这两个类来源于同一个Class文件，被同一个Java虚拟机加载，只要加载它们的类加载器不同，那这两个类就必定不相等。</p>
<blockquote>
<p>这里所指的“相等”，包括代表类的Class对象的equals()方法、isAssignableFrom()方法、isInstance()方法的返回结果，也包括了使用<code>instanceof</code>关键字做对象所属关系判定等各种情况。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 类加载器与instanceof关键字演示</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> zzm</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassLoaderTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ClassLoader myLoader = <span class="keyword">new</span> ClassLoader() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> Class&lt;?&gt; loadClass(String name) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    String fileName = name.substring(name.lastIndexOf(<span class="string">"."</span>) + <span class="number">1</span>)+<span class="string">".class"</span>;</span><br><span class="line">                    InputStream is = getClass().getResourceAsStream(fileName);</span><br><span class="line">                    <span class="keyword">if</span> (is == <span class="keyword">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">super</span>.loadClass(name);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">byte</span>[] b = <span class="keyword">new</span> <span class="keyword">byte</span>[is.available()];</span><br><span class="line">                    is.read(b);</span><br><span class="line">                    <span class="keyword">return</span> defineClass(name, b, <span class="number">0</span>, b.length);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> ClassNotFoundException(name);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">    	&#125;;</span><br><span class="line">        Object obj = myLoader.loadClass(<span class="string">"org.fenixsoft.classloading.ClassLoaderTest"</span>).newInstance();</span><br><span class="line">        System.out.println(obj.getClass());</span><br><span class="line">        System.out.println(obj <span class="keyword">instanceof</span> org.fenixsoft.classloading.ClassLoaderTest);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">org</span>.<span class="title">fenixsoft</span>.<span class="title">classloading</span>.<span class="title">ClassLoaderTest</span></span></span><br><span class="line"><span class="class"><span class="title">false</span></span></span><br></pre></td></tr></table></figure>

<p>两行输出结果中，从第一行可以看到这个对象确实是类<code>org.fenixsoft.classloading.ClassLoaderTest</code>实例化出来的，但在第二行的输出中却发现这个对象与类<code>org.fenixsoft.classloading.ClassLoaderTest</code>做所属类型检查的时候返回了false。这是因为Java虚拟机中同时存在了两个<code>ClassLoaderTest</code>类，一个是由虚拟机的应用程序类加载器所加载的，另外一个是由我们自定义的类加载器加载的，虽然它们都来自同一个Class文件，但在Java虚拟机中仍然是两个互相独立的类，做对象所属类型检查时的结果自然为false。</p>
<h3 id="双亲委派模型"><a href="#双亲委派模型" class="headerlink" title="双亲委派模型"></a>双亲委派模型</h3><h4 id="三层类加载器"><a href="#三层类加载器" class="headerlink" title="三层类加载器"></a>三层类加载器</h4><ul>
<li>启动类加载器<ul>
<li>负责加载存放在<code>&lt;JAVA_HOME&gt;\lib</code>目录，或者被<code>-Xbootclasspath</code>参数所指定的路径中存放的，而且是Java虚拟机能够识别的（按照文件名识别，如rt.jar、tools.jar，名字不符合的类库即使放在lib目录中也不会被加载）类库加载到虚拟机的内存中。启动类加载器无法被Java程序直接引用，用户在编写自定义类加载器时，如果需要把加载请求委派给引导类加载器去处理，那直接使用null代替即可。</li>
</ul>
</li>
<li>扩展类加载器<ul>
<li>这个类加载器是在类<code>sun.misc.Launcher$ExtClassLoader</code>中以Java代码的形式实现的。它负责加载<code>&lt;JAVA_HOME&gt;\lib\ext</code>目录中，或者被<code>java.ext.dirs</code>系统变量所指定的路径中所有的类库</li>
</ul>
</li>
<li>应用程序类加载器<ul>
<li>这个类加载器由<code>sun.misc.Launcher$AppClassLoader</code>来实现。负责加载用户类路径（<code>ClassPath</code>）上所有的类库，开发者同样可以直接在代码中使用这个类加载器。如果应用程序中没有自定义过自己的类加载器，一般情况下这个就是程序中默认的类加载器。</li>
</ul>
</li>
</ul>
<h4 id="双亲委派机制"><a href="#双亲委派机制" class="headerlink" title="双亲委派机制"></a>双亲委派机制</h4><p>双亲委派模型的工作过程是：如果一个类加载器收到了类加载的请求，它首先不会自己去尝试加载这个类，而是把这个请求委派给父类加载器去完成，每一个层次的类加载器都是如此，因此所有的加载请求最终都应该传送到最顶层的启动类加载器中，只有当父加载器反馈自己无法完成这个加载请求（它的搜索范围中没有找到所需的类）时，子加载器才会尝试自己去完成加载。</p>
<p><img src="http://img.mozhengfly.top/blog/202012/05/203709-454109.png" alt="1607171828283"></p>
<p><img src="http://img.mozhengfly.top/blog/202012/05/203908-816744.png" alt="1607171946859"></p>
]]></content>
      <categories>
        <category>JVM</category>
      </categories>
  </entry>
  <entry>
    <title>SpringBoot脚本</title>
    <url>/2020/08/06/scripts/%E5%B8%B8%E7%94%A8%E8%84%9A%E6%9C%AC/</url>
    <content><![CDATA[<h2 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h2><h3 id="windows"><a href="#windows" class="headerlink" title="windows"></a>windows</h3><h4 id="SpringBoot启动脚本"><a href="#SpringBoot启动脚本" class="headerlink" title="SpringBoot启动脚本"></a>SpringBoot启动脚本</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">@echo off</span><br><span class="line">rem jre的路劲</span><br><span class="line">set path=E:\Program Files\Java\jdk1.8.0_45\jre\bin</span><br><span class="line">rem 要启动的端口</span><br><span class="line">set port=8088</span><br><span class="line">rem app name</span><br><span class="line">set app=data-synchronization.jar</span><br><span class="line">rem 指定环境</span><br><span class="line">set profile=prod</span><br><span class="line">rem JVM参数</span><br><span class="line">set options=-Xms1024M -Xmx2048M -Xss1M</span><br><span class="line">"%path%\java" %options% -jar %app% --server.port=%port% --spring.profiles.active=%profile%</span><br><span class="line">pause</span><br></pre></td></tr></table></figure>

<h4 id="SpringBoot后台启动脚本"><a href="#SpringBoot后台启动脚本" class="headerlink" title="SpringBoot后台启动脚本"></a>SpringBoot后台启动脚本</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">@echo off</span><br><span class="line">rem jre的路劲</span><br><span class="line">set path=E:\Program Files\Java\jdk1.8.0_45\jre\bin</span><br><span class="line">rem 要启动的端口</span><br><span class="line">set port=8088</span><br><span class="line">rem app name</span><br><span class="line">set app=music</span><br><span class="line">rem 指定环境</span><br><span class="line">set profile=prod</span><br><span class="line">rem JVM参数</span><br><span class="line">set options=-Xms1024M -Xmx2048M -Xss1M</span><br><span class="line">start "%app%" "%path%\javaw" %options% -jar %app%.jar --server.port=%port% --spring.profiles.active=%profile%</span><br><span class="line">exit</span><br></pre></td></tr></table></figure>

<h4 id="SpringBoot根据名字停止服务"><a href="#SpringBoot根据名字停止服务" class="headerlink" title="SpringBoot根据名字停止服务"></a>SpringBoot根据名字停止服务</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">@echo off</span><br><span class="line">wmic  process where (commandline LIKE "%%music%%" and caption="javaw.exe") call terminate</span><br><span class="line">exit</span><br></pre></td></tr></table></figure>

<h4 id="根据端口停止应用"><a href="#根据端口停止应用" class="headerlink" title="根据端口停止应用"></a>根据端口停止应用</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">@echo off</span><br><span class="line">setlocal enabledelayedexpansion</span><br><span class="line">set /p port=请输入端口号：</span><br><span class="line">for /f "tokens=1-5" %%a in ('netstat -ano ^| find ":%port%"') do (</span><br><span class="line">    if "%%e%" == "" (</span><br><span class="line">        set pid=%%d</span><br><span class="line">    ) else (</span><br><span class="line">        set pid=%%e</span><br><span class="line">    )</span><br><span class="line">    echo !pid!</span><br><span class="line">    taskkill /f /pid !pid!</span><br><span class="line">)</span><br><span class="line">pause</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">@echo off</span><br><span class="line">set port=7080</span><br><span class="line">for /f "tokens=1-5" %%i in ('netstat -ano^|findstr ":%port%"') do (</span><br><span class="line">	echo %%m</span><br><span class="line">	taskkill /f /pid %%m</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h3 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h3><h4 id="停止服务"><a href="#停止服务" class="headerlink" title="停止服务"></a>停止服务</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line">APP_NAME=music</span><br><span class="line"></span><br><span class="line">tpid=`ps -ef|grep <span class="variable">$APP_NAME</span>|grep -v grep|grep -v <span class="built_in">kill</span>|awk <span class="string">'&#123;print $2&#125;'</span>`</span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$&#123;tpid&#125;</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">'Stop Process...'</span></span><br><span class="line">    <span class="built_in">kill</span> -15 <span class="variable">$tpid</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line">sleep 5</span><br><span class="line">tpid=`ps -ef|grep <span class="variable">$APP_NAME</span>|grep -v grep|grep -v <span class="built_in">kill</span>|awk <span class="string">'&#123;print $2&#125;'</span>`</span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$&#123;tpid&#125;</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">'Kill Process!'</span></span><br><span class="line">    <span class="built_in">kill</span> -9 <span class="variable">$tpid</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">'Stop Success!'</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>

<h4 id="全部脚本"><a href="#全部脚本" class="headerlink" title="全部脚本"></a>全部脚本</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment">#这里可替换为你自己的执行程序，其他代码无需更改</span></span><br><span class="line"><span class="comment"># Jre的bin目录，绝对路径，如果配置了JAVA_HOME，那么这里可以为空</span></span><br><span class="line">JRE_HOME=</span><br><span class="line"><span class="comment"># 端口</span></span><br><span class="line">PORT=8080</span><br><span class="line"><span class="comment"># 应用名称</span></span><br><span class="line">APP_NAME=music.jar</span><br><span class="line"><span class="comment"># 启动环境</span></span><br><span class="line">PROFILE=prod</span><br><span class="line"><span class="comment">#使用说明，用来提示输入参数</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># bin目录绝对路径</span></span><br><span class="line">BIN_PATH=$(<span class="built_in">cd</span> `dirname <span class="variable">$0</span>`; <span class="built_in">pwd</span>)</span><br><span class="line"><span class="comment"># 进入bin目录</span></span><br><span class="line"><span class="built_in">cd</span> `dirname <span class="variable">$0</span>`</span><br><span class="line"><span class="comment"># 打印项目根目录绝对路径</span></span><br><span class="line"><span class="comment"># `pwd` 执行系统命令并获得结果</span></span><br><span class="line">BASE_PATH=`<span class="built_in">pwd</span>`</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">usage</span></span>() &#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"Usage: sh app.sh [start|stop|restart|status]"</span></span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 确认JRE_HOME已经配置好了</span></span><br><span class="line"><span class="function"><span class="title">confirm_jre_home</span></span>() &#123;</span><br><span class="line">  <span class="keyword">if</span> [[ -n <span class="variable">$JAVA_HOME</span> ]];</span><br><span class="line">  <span class="keyword">then</span></span><br><span class="line">    JRE_HOME=<span class="variable">$JAVA_HOME</span>/jre/bin</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"JRE_HOME: <span class="variable">$JRE_HOME</span>"</span></span><br><span class="line">  <span class="keyword">elif</span> [[ -z <span class="variable">$JRE_HOME</span> ]];</span><br><span class="line">  <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"启动失败,请配置JRE_HOME变量值"</span></span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"JRE_HOME: <span class="variable">$JRE_HOME</span>"</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#检查程序是否在运行</span></span><br><span class="line"><span class="function"><span class="title">is_exist</span></span>()&#123;</span><br><span class="line">  pid=`ps -ef|grep <span class="variable">$APP_NAME</span>|grep -v grep|awk <span class="string">'&#123;print $2&#125;'</span> `</span><br><span class="line">  <span class="comment">#如果不存在返回1，存在返回0</span></span><br><span class="line">  <span class="keyword">if</span> [ -z <span class="string">"<span class="variable">$&#123;pid&#125;</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">return</span> 1</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">return</span> 0</span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#启动方法</span></span><br><span class="line"><span class="function"><span class="title">start</span></span>()&#123;</span><br><span class="line">  is_exist</span><br><span class="line">  <span class="keyword">if</span> [ $? -eq <span class="string">"0"</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"<span class="variable">$&#123;APP_NAME&#125;</span> is already running. pid=<span class="variable">$&#123;pid&#125;</span> ."</span></span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    confirm_jre_home</span><br><span class="line">    nohup <span class="variable">$JRE_HOME</span>/java -jar <span class="variable">$BASE_PATH</span>/<span class="variable">$APP_NAME</span> --spring.profiles.active=<span class="variable">$PROFILE</span> --server.port=<span class="variable">$PORT</span> &gt; <span class="variable">$BASE_PATH</span>/app.log 2&gt;&amp;1 &amp;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"<span class="variable">$&#123;APP_NAME&#125;</span> start success"</span></span><br><span class="line">    <span class="keyword">if</span> [ ! -f <span class="variable">$BASE_PATH</span>/app.log ]; <span class="keyword">then</span></span><br><span class="line">      sleep 3</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">    tail -f <span class="variable">$BASE_PATH</span>/app.log</span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#停止方法</span></span><br><span class="line"><span class="function"><span class="title">stop</span></span>()&#123;</span><br><span class="line">  is_exist</span><br><span class="line">  <span class="keyword">if</span> [ $? -eq <span class="string">"0"</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">kill</span> -9 <span class="variable">$pid</span></span><br><span class="line">    is_exist</span><br><span class="line">    <span class="keyword">if</span> [ $? -eq <span class="string">"0"</span> ]; <span class="keyword">then</span></span><br><span class="line">      <span class="built_in">echo</span> <span class="string">"<span class="variable">$&#123;APP_NAME&#125;</span> stop failed."</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      <span class="built_in">echo</span> <span class="string">"<span class="variable">$&#123;APP_NAME&#125;</span> stop successful."</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"<span class="variable">$&#123;APP_NAME&#125;</span> is not running"</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#输出运行状态</span></span><br><span class="line"><span class="function"><span class="title">status</span></span>()&#123;</span><br><span class="line">  is_exist</span><br><span class="line">  <span class="keyword">if</span> [ $? -eq <span class="string">"0"</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"<span class="variable">$&#123;APP_NAME&#125;</span> is running. Pid is <span class="variable">$&#123;pid&#125;</span>"</span></span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"<span class="variable">$&#123;APP_NAME&#125;</span> is not running."</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#重启</span></span><br><span class="line"><span class="function"><span class="title">restart</span></span>()&#123;</span><br><span class="line">  stop</span><br><span class="line">  start</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#根据输入参数，选择执行对应方法，不输入则执行使用说明</span></span><br><span class="line"><span class="keyword">case</span> <span class="string">"<span class="variable">$1</span>"</span> <span class="keyword">in</span></span><br><span class="line">  <span class="string">"start"</span>)</span><br><span class="line">    start</span><br><span class="line">    ;;</span><br><span class="line">  <span class="string">"stop"</span>)</span><br><span class="line">    stop</span><br><span class="line">    ;;</span><br><span class="line">  <span class="string">"status"</span>)</span><br><span class="line">    status</span><br><span class="line">    ;;</span><br><span class="line">  <span class="string">"restart"</span>)</span><br><span class="line">    restart</span><br><span class="line">    ;;</span><br><span class="line">  *)</span><br><span class="line">    usage</span><br><span class="line">    ;;</span><br><span class="line"><span class="keyword">esac</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>脚本</category>
      </categories>
  </entry>
  <entry>
    <title>ribbon</title>
    <url>/2020/12/04/spring-cloud/ribbon/</url>
    <content><![CDATA[<h3 id="多个服务中只调用指定一个服务"><a href="#多个服务中只调用指定一个服务" class="headerlink" title="多个服务中只调用指定一个服务"></a>多个服务中只调用指定一个服务</h3><blockquote>
<p>需求描述：在一个注册中心里面有多个名为<code>user-service</code>的服务，使用<code>Feign</code> 进行服务调用的时候期望永远只调用指定的那一个服务。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 调用方代码</span></span><br><span class="line"><span class="meta">@FeignClient</span>(value = <span class="string">"user-service"</span>, path = <span class="string">"/api/v1/user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IUserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function">User <span class="title">getUserById</span><span class="params">(@PathVariable String id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h4><p>查看了相关文档，发现ribbon会维护eureka的服务实例，默认有过滤服务实例的策略，默认实现类为<code>ZonePreferenceServerListFilter</code>。</p>
<blockquote>
<p><code>ZonePreferenceServerListFilter</code>：使用Spring Cloud 整合Ribbon默认会使用该过滤器，他实现了通过配置或者Eureka实例元数据的所属区域（Zone）来过滤出同区域的服务实例，首先通过父类<code>ZoneAffinityServerListFilter</code>获取“区域感知”的服务实例列表，然后遍历取出根据消费者配置预设的区域Zone来进行过滤，如果结果为空则直接返回父类获取的结果，不为空返回通过消费者配置的Zone过滤后的结果。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 关键源码</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Server&gt; <span class="title">getFilteredListOfServers</span><span class="params">(List&lt;Server&gt; servers)</span> </span>&#123;</span><br><span class="line">	List&lt;Server&gt; output = <span class="keyword">super</span>.getFilteredListOfServers(servers);</span><br><span class="line">	<span class="keyword">if</span> (<span class="keyword">this</span>.zone != <span class="keyword">null</span> &amp;&amp; output.size() == servers.size()) &#123;</span><br><span class="line">		List&lt;Server&gt; local = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">		<span class="keyword">for</span> (Server server : output) &#123;</span><br><span class="line">			<span class="keyword">if</span> (<span class="keyword">this</span>.zone.equalsIgnoreCase(server.getZone())) &#123;</span><br><span class="line">				local.add(server);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (!local.isEmpty()) &#123;</span><br><span class="line">			<span class="keyword">return</span> local;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> output;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>源码分析发现，使用策略是eureka实例的元数据进行比较过滤的，配置key为<code>eureka.instance.metadata-map.zone</code></p>
<h4 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h4><p>在调用方和被调用方（只配置一个）均配置<code>eureka.instance.metadata-map.zone</code>为同一个值，这样就会过滤掉元数据zone不一致的服务，从而达到在众多服务中，每次调用服务的时候都只调用一个指定的服务实例的效果。注意的是：只能在想调用的指定服务中配置，不然配置多了就会维护多个服务示例，到时候还是默认轮询调用。</p>
<p>例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 调用方配置</span><br><span class="line">eureka.instance.metadata-map.zone&#x3D;wangchonglin</span><br><span class="line">&#x2F;&#x2F; 被调用方配置</span><br><span class="line">eureka.instance.metadata-map.zone&#x3D;wangchonglin</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>spring-cloud</category>
      </categories>
  </entry>
</search>
